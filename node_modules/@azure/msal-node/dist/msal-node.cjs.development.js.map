{"version":3,"file":"msal-node.cjs.development.js","sources":["../src/utils/Constants.ts","../src/network/HttpClient.ts","../src/utils/NetworkUtils.ts","../src/config/Configuration.ts","../src/crypto/GuidGenerator.ts","../src/utils/EncodingUtils.ts","../src/crypto/PkceGenerator.ts","../src/crypto/CryptoProvider.ts","../src/cache/serializer/Deserializer.ts","../src/cache/serializer/Serializer.ts","../src/cache/NodeStorage.ts","../src/cache/TokenCache.ts","../src/packageMetadata.ts","../src/client/ClientApplication.ts","../src/client/PublicClientApplication.ts","../src/client/ClientAssertion.ts","../src/client/ConfidentialClientApplication.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * http methods\n */\nexport enum HttpMethod {\n    GET = \"get\",\n    POST = \"post\",\n}\n\n/**\n * Constants used for region discovery\n */\nexport const REGION_ENVIRONMENT_VARIABLE = \"REGION_NAME\";\n\n/**\n * Constant used for PKCE\n */\nexport const RANDOM_OCTET_SIZE = 32;\n\n/**\n * Constants used in PKCE\n */\nexport const Hash = {\n    SHA256: \"sha256\",\n};\n\n/**\n * Constants for encoding schemes\n */\nexport const CharSet = {\n    CV_CHARSET:\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~\",\n};\n\n/**\n * Cache Constants\n */\nexport const CACHE = {\n    FILE_CACHE: \"fileCache\",\n    EXTENSION_LIB: \"extenstion_library\",\n};\n\n/**\n * Constants\n */\nexport const Constants = {\n    MSAL_SKU: \"msal.js.node\",\n    JWT_BEARER_ASSERTION_TYPE: \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\"\n};\n\n/**\n * API Codes for Telemetry purposes.\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\n * 0-99 Silent Flow\n * 600-699 Device Code Flow\n * 800-899 Auth Code Flow\n */\nexport enum ApiId {\n    acquireTokenSilent = 62,\n    acquireTokenByUsernamePassword = 371,\n    acquireTokenByDeviceCode = 671,\n    acquireTokenByClientCredential = 771,\n    acquireTokenByCode = 871,\n    acquireTokenByRefreshToken = 872\n}\n\n/**\n * JWT  constants\n */\nexport const JwtConstants = {\n    ALGORITHM: \"alg\",\n    RSA_256: \"RS256\",\n    X5T: \"x5t\", \n    X5C: \"x5c\",\n    AUDIENCE: \"aud\",\n    EXPIRATION_TIME: \"exp\",\n    ISSUER: \"iss\",\n    SUBJECT: \"sub\",\n    NOT_BEFORE: \"nbf\",\n    JWT_ID: \"jti\",\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    INetworkModule,\n    NetworkRequestOptions,\n    NetworkResponse,\n} from \"@azure/msal-common\";\nimport { HttpMethod } from \"../utils/Constants\";\nimport axios, { AxiosRequestConfig } from \"axios\";\n\n/**\n * This class implements the API for network requests.\n */\nexport class HttpClient implements INetworkModule {\n\n    /**\n     * Http Get request\n     * @param url\n     * @param options\n     */\n    async sendGetRequestAsync<T>(\n        url: string,\n        options?: NetworkRequestOptions\n    ): Promise<NetworkResponse<T>> {\n        const request: AxiosRequestConfig = {\n            method: HttpMethod.GET,\n            url: url,\n            /* istanbul ignore next */\n            headers: options && options.headers,\n            /* istanbul ignore next */\n            validateStatus: () => true\n        };\n\n        const response = await axios(request);\n        return {\n            headers: response.headers,\n            body: response.data as T,\n            status: response.status,\n        };\n    }\n\n    /**\n     * Http Post request\n     * @param url\n     * @param options\n     */\n    async sendPostRequestAsync<T>(\n        url: string,\n        options?: NetworkRequestOptions,\n        cancellationToken?: number \n    ): Promise<NetworkResponse<T>> {\n        const request: AxiosRequestConfig = {\n            method: HttpMethod.POST,\n            url: url,\n            /* istanbul ignore next */\n            data: (options && options.body) || \"\",\n            timeout: cancellationToken,\n            /* istanbul ignore next */\n            headers: options && options.headers,\n            /* istanbul ignore next */\n            validateStatus: () => true\n        };\n\n        const response = await axios(request);\n        return {\n            headers: response.headers,\n            body: response.data as T,\n            status: response.status,\n        };\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"@azure/msal-common\";\nimport { HttpClient } from \"../network/HttpClient\";\n\nexport class NetworkUtils {\n    /**\n     * Returns best compatible network client object.\n     */\n    static getNetworkClient(): INetworkModule {\n        return new HttpClient();\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    LoggerOptions,\n    INetworkModule,\n    LogLevel,\n    ProtocolMode,\n    ICachePlugin, Constants\n} from \"@azure/msal-common\";\nimport { NetworkUtils } from \"../utils/NetworkUtils\";\n\n/**\n * - clientId               - Client id of the application.\n * - authority              - Url of the authority. If no value is set, defaults to https://login.microsoftonline.com/common.\n * - knownAuthorities       - Needed for Azure B2C and ADFS. All authorities that will be used in the client application. Only the host of the authority should be passed in.\n * - clientSecret           - Secret string that the application uses when requesting a token. Only used in confidential client applications. Can be created in the Azure app registration portal.\n * - clientAssertion        - Assertion string that the application uses when requesting a token. Only used in confidential client applications. Assertion should be of type urn:ietf:params:oauth:client-assertion-type:jwt-bearer.\n * - clientCertificate      - Certificate that the application uses when requesting a token. Only used in confidential client applications. Requires hex encoded X.509 SHA-1 thumbprint of the certificiate, and the PEM encoded private key (string should contain -----BEGIN PRIVATE KEY----- ... -----END PRIVATE KEY----- )\n * - protocolMode           - Enum that represents the protocol that msal follows. Used for configuring proper endpoints.\n * @public\n */\nexport type NodeAuthOptions = {\n    clientId: string;\n    authority?: string;\n    clientSecret?: string;\n    clientAssertion?:string;\n    clientCertificate?: {\n        thumbprint: string,\n        privateKey: string,\n        x5c?: string\n    };\n    knownAuthorities?: Array<string>;\n    cloudDiscoveryMetadata?: string;\n    authorityMetadata?: string,\n    clientCapabilities?: Array<string>;\n    protocolMode?: ProtocolMode;\n};\n\n/**\n * Use this to configure the below cache configuration options:\n *\n * - cachePlugin   - Plugin for reading and writing token cache to disk.\n * @public\n */\nexport type CacheOptions = {\n    cachePlugin?: ICachePlugin;\n};\n\n/**\n * Type for configuring logger and http client options\n *\n * - logger                       - Used to initialize the Logger object; TODO: Expand on logger details or link to the documentation on logger\n * - networkClient                - Http client used for all http get and post calls. Defaults to using MSAL's default http client.\n * @public\n */\nexport type NodeSystemOptions = {\n    loggerOptions?: LoggerOptions;\n    networkClient?: INetworkModule;\n};\n\n/**\n * Use the configuration object to configure MSAL and initialize the client application object\n *\n * - auth: this is where you configure auth elements like clientID, authority used for authenticating against the Microsoft Identity Platform\n * - cache: this is where you configure cache location\n * - system: this is where you can configure the network client, logger\n * @public\n */\nexport type Configuration = {\n    auth: NodeAuthOptions;\n    cache?: CacheOptions;\n    system?: NodeSystemOptions;\n};\n\nconst DEFAULT_AUTH_OPTIONS: Required<NodeAuthOptions> = {\n    clientId: \"\",\n    authority: Constants.DEFAULT_AUTHORITY,\n    clientSecret: \"\",\n    clientAssertion: \"\",\n    clientCertificate: {\n        thumbprint: \"\",\n        privateKey: \"\",\n        x5c: \"\"\n    },\n    knownAuthorities: [],\n    cloudDiscoveryMetadata: \"\",\n    authorityMetadata: \"\",\n    clientCapabilities: [],\n    protocolMode: ProtocolMode.AAD\n};\n\nconst DEFAULT_CACHE_OPTIONS: CacheOptions = {};\n\nconst DEFAULT_LOGGER_OPTIONS: LoggerOptions = {\n    loggerCallback: (): void => {\n        // allow users to not set logger call back\n    },\n    piiLoggingEnabled: false,\n    logLevel: LogLevel.Info,\n};\n\nconst DEFAULT_SYSTEM_OPTIONS: Required<NodeSystemOptions> = {\n    loggerOptions: DEFAULT_LOGGER_OPTIONS,\n    networkClient: NetworkUtils.getNetworkClient(),\n};\n\nexport type NodeConfiguration = {\n    auth: Required<NodeAuthOptions>;\n    cache: CacheOptions;\n    system: Required<NodeSystemOptions>;\n};\n\n/**\n * Sets the default options when not explicitly configured from app developer\n *\n * @param auth - Authentication options\n * @param cache - Cache options\n * @param system - System options\n *\n * @returns Configuration\n * @public\n */\nexport function buildAppConfiguration({\n    auth,\n    cache,\n    system,\n}: Configuration): NodeConfiguration {\n    return {\n        auth: { ...DEFAULT_AUTH_OPTIONS, ...auth },\n        cache: { ...DEFAULT_CACHE_OPTIONS, ...cache },\n        system: { ...DEFAULT_SYSTEM_OPTIONS, ...system },\n    };\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport class GuidGenerator {\n    /**\n     *\n     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or pseudo-random numbers.\n     * uuidv4 generates guids from cryprtographically-string random\n     */\n    static generateGuid(): string {\n        return uuidv4();\n    }\n\n    /**\n     * verifies if a string is  GUID\n     * @param guid\n     */\n    static isGuid(guid: string): boolean {\n        const regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n        return regexGuid.test(guid);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport class EncodingUtils {\n    /**\n     * 'utf8': Multibyte encoded Unicode characters. Many web pages and other document formats use UTF-8.\n     * 'base64': Base64 encoding.\n     *\n     * @param str text\n     */\n    static base64Encode(str: string, encoding?: BufferEncoding): string {\n        return Buffer.from(str, encoding).toString(\"base64\");\n    }\n\n    /**\n     * encode a URL\n     * @param str\n     */\n    static base64EncodeUrl(str: string, encoding?: BufferEncoding): string {\n        return EncodingUtils.base64Encode(str, encoding)\n            .replace(/=/g, \"\")\n            .replace(/\\+/g, \"-\")\n            .replace(/\\//g, \"_\");\n    }\n\n    /**\n     * 'utf8': Multibyte encoded Unicode characters. Many web pages and other document formats use UTF-8.\n     * 'base64': Base64 encoding.\n     *\n     * @param base64Str Base64 encoded text\n     */\n    static base64Decode(base64Str: string): string {\n        return Buffer.from(base64Str, \"base64\").toString(\"utf8\");\n    }\n\n    /**\n     * @param base64Str Base64 encoded Url\n     */\n    static base64DecodeUrl(base64Str: string): string {\n        let str = base64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n        while (str.length % 4) {\n            str += \"=\";\n        }\n        return EncodingUtils.base64Decode(str);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { PkceCodes } from \"@azure/msal-common\";\nimport { CharSet, Hash, RANDOM_OCTET_SIZE } from \"../utils/Constants\";\nimport { EncodingUtils } from \"../utils/EncodingUtils\";\nimport crypto from \"crypto\";\n\n/**\n * https://tools.ietf.org/html/rfc7636#page-8\n */\nexport class PkceGenerator {\n    /**\n     * generates the codeVerfier and the challenge from the codeVerfier\n     * reference: https://tools.ietf.org/html/rfc7636#section-4.1 and https://tools.ietf.org/html/rfc7636#section-4.2\n     */\n    async generatePkceCodes(): Promise<PkceCodes> {\n        const verifier = this.generateCodeVerifier();\n        const challenge = this.generateCodeChallengeFromVerifier(verifier);\n        return { verifier, challenge };\n    }\n\n    /**\n     * generates the codeVerfier; reference: https://tools.ietf.org/html/rfc7636#section-4.1\n     */\n    private generateCodeVerifier(): string {\n        const charArr = [];\n        const maxNumber = 256 - (256 % CharSet.CV_CHARSET.length);\n        while (charArr.length <= RANDOM_OCTET_SIZE) {\n            const byte = crypto.randomBytes(1)[0];\n            if (byte >= maxNumber) {\n                /* \n                 * Ignore this number to maintain randomness.\n                 * Including it would result in an unequal distribution of characters after doing the modulo\n                 */\n                continue;\n            }\n            const index = byte % CharSet.CV_CHARSET.length;\n            charArr.push(CharSet.CV_CHARSET[index]);\n        }\n        const verifier: string = charArr.join(\"\");\n        return EncodingUtils.base64EncodeUrl(verifier);\n    }\n\n    /**\n     * generate the challenge from the codeVerfier; reference: https://tools.ietf.org/html/rfc7636#section-4.2\n     * @param codeVerifier\n     */\n    private generateCodeChallengeFromVerifier(codeVerifier: string): string {\n        return EncodingUtils.base64EncodeUrl(\n            this.sha256(codeVerifier).toString(\"base64\"), \n            \"base64\"\n        );\n    }\n\n    /**\n     * generate 'SHA256' hash\n     * @param buffer\n     */\n    private sha256(buffer: string): Buffer {\n        return crypto\n            .createHash(Hash.SHA256)\n            .update(buffer)\n            .digest();\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, PkceCodes } from \"@azure/msal-common\";\nimport { GuidGenerator } from \"./GuidGenerator\";\nimport { EncodingUtils } from \"../utils/EncodingUtils\";\nimport { PkceGenerator } from \"./PkceGenerator\";\n\n/**\n * This class implements MSAL node's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\n * @public\n */\nexport class CryptoProvider implements ICrypto {\n    private pkceGenerator: PkceGenerator;\n\n    constructor() {\n        // Browser crypto needs to be validated first before any other classes can be set.\n        this.pkceGenerator = new PkceGenerator();\n    }\n\n    /**\n     * Creates a new random GUID - used to populate state and nonce.\n     * @returns string (GUID)\n     */\n    createNewGuid(): string {\n        return GuidGenerator.generateGuid();\n    }\n\n    /**\n     * Encodes input string to base64.\n     * @param input - string to be encoded\n     */\n    base64Encode(input: string): string {\n        return EncodingUtils.base64Encode(input);\n    }\n\n    /**\n     * Decodes input string from base64.\n     * @param input - string to be decoded\n     */\n    base64Decode(input: string): string {\n        return EncodingUtils.base64Decode(input);\n    }\n\n    /**\n     * Generates PKCE codes used in Authorization Code Flow.\n     */\n    generatePkceCodes(): Promise<PkceCodes> {\n        return this.pkceGenerator.generatePkceCodes();\n    }\n\n    /**\n     * Generates a keypair, stores it and returns a thumbprint - not yet implemented for node\n     */\n    getPublicKeyThumbprint(): Promise<string> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Removes cryptographic keypair from key store matching the keyId passed in\n     * @param kid \n     */\n    removeTokenBindingKey(): Promise<boolean> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Removes all cryptographic keys from Keystore\n     */\n    clearKeystore(): Promise<boolean> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Signs the given object as a jwt payload with private key retrieved by given kid - currently not implemented for node\n     */\n    signJwt(): Promise<string> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Returns the SHA-256 hash of an input string\n     */\n    hashString(): Promise<string> {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils, AccountCache, IdTokenCache, AccessTokenCache, RefreshTokenCache, AppMetadataCache, AccountEntity, IdTokenEntity, AccessTokenEntity, RefreshTokenEntity, AppMetadataEntity, CacheManager } from \"@azure/msal-common\";\nimport { JsonCache, InMemoryCache, SerializedAccountEntity, SerializedIdTokenEntity, SerializedAccessTokenEntity, SerializedRefreshTokenEntity, SerializedAppMetadataEntity } from \"./SerializerTypes\";\n\n/**\n * This class deserializes cache entities read from the file into in memory object types defined internally\n */\nexport class Deserializer {\n    /**\n     * Parse the JSON blob in memory and deserialize the content\n     * @param cachedJson\n     */\n    static deserializeJSONBlob(jsonFile: string): JsonCache {\n        const deserializedCache = StringUtils.isEmpty(jsonFile)\n            ? {}\n            : JSON.parse(jsonFile);\n        return deserializedCache;\n    }\n\n    /**\n     * Deserializes accounts to AccountEntity objects\n     * @param accounts\n     */\n    static deserializeAccounts(accounts: Record<string, SerializedAccountEntity>): AccountCache {\n        const accountObjects: AccountCache = {};\n        if (accounts) {\n            Object.keys(accounts).map(function (key) {\n                const serializedAcc = accounts[key];\n                const mappedAcc = {\n                    homeAccountId: serializedAcc.home_account_id,\n                    environment: serializedAcc.environment,\n                    realm: serializedAcc.realm,\n                    localAccountId: serializedAcc.local_account_id,\n                    username: serializedAcc.username,\n                    authorityType: serializedAcc.authority_type,\n                    name: serializedAcc.name,\n                    clientInfo: serializedAcc.client_info,\n                    lastModificationTime: serializedAcc.last_modification_time,\n                    lastModificationApp: serializedAcc.last_modification_app,\n                };\n                const account: AccountEntity = new AccountEntity();\n                CacheManager.toObject(account, mappedAcc);\n                accountObjects[key] = account;\n            });\n        }\n\n        return accountObjects;\n    }\n\n    /**\n     * Deserializes id tokens to IdTokenEntity objects\n     * @param idTokens\n     */\n    static deserializeIdTokens(idTokens: Record<string, SerializedIdTokenEntity>): IdTokenCache {\n        const idObjects: IdTokenCache = {};\n        if (idTokens) {\n            Object.keys(idTokens).map(function (key) {\n                const serializedIdT = idTokens[key];\n                const mappedIdT = {\n                    homeAccountId: serializedIdT.home_account_id,\n                    environment: serializedIdT.environment,\n                    credentialType: serializedIdT.credential_type,\n                    clientId: serializedIdT.client_id,\n                    secret: serializedIdT.secret,\n                    realm: serializedIdT.realm,\n                };\n                const idToken: IdTokenEntity = new IdTokenEntity();\n                CacheManager.toObject(idToken, mappedIdT);\n                idObjects[key] = idToken;\n            });\n        }\n        return idObjects;\n    }\n\n    /**\n     * Deserializes access tokens to AccessTokenEntity objects\n     * @param accessTokens\n     */\n    static deserializeAccessTokens(accessTokens: Record<string, SerializedAccessTokenEntity>): AccessTokenCache {\n        const atObjects: AccessTokenCache = {};\n        if (accessTokens) {\n            Object.keys(accessTokens).map(function (key) {\n                const serializedAT = accessTokens[key];\n                const mappedAT = {\n                    homeAccountId: serializedAT.home_account_id,\n                    environment: serializedAT.environment,\n                    credentialType: serializedAT.credential_type,\n                    clientId: serializedAT.client_id,\n                    secret: serializedAT.secret,\n                    realm: serializedAT.realm,\n                    target: serializedAT.target,\n                    cachedAt: serializedAT.cached_at,\n                    expiresOn: serializedAT.expires_on,\n                    extendedExpiresOn: serializedAT.extended_expires_on,\n                    refreshOn: serializedAT.refresh_on,\n                    keyId: serializedAT.key_id,\n                    tokenType: serializedAT.token_type,\n                };\n                const accessToken: AccessTokenEntity = new AccessTokenEntity();\n                CacheManager.toObject(accessToken, mappedAT);\n                atObjects[key] = accessToken;\n            });\n        }\n\n        return atObjects;\n    }\n\n    /**\n     * Deserializes refresh tokens to RefreshTokenEntity objects\n     * @param refreshTokens\n     */\n    static deserializeRefreshTokens(refreshTokens: Record<string, SerializedRefreshTokenEntity>): RefreshTokenCache {\n        const rtObjects: RefreshTokenCache = {};\n        if (refreshTokens) {\n            Object.keys(refreshTokens).map(function (key) {\n                const serializedRT = refreshTokens[key];\n                const mappedRT = {\n                    homeAccountId: serializedRT.home_account_id,\n                    environment: serializedRT.environment,\n                    credentialType: serializedRT.credential_type,\n                    clientId: serializedRT.client_id,\n                    secret: serializedRT.secret,\n                    familyId: serializedRT.family_id,\n                    target: serializedRT.target,\n                    realm: serializedRT.realm,\n                };\n                const refreshToken: RefreshTokenEntity = new RefreshTokenEntity();\n                CacheManager.toObject(refreshToken, mappedRT);\n                rtObjects[key] = refreshToken;\n            });\n        }\n\n        return rtObjects;\n    }\n\n    /**\n     * Deserializes appMetadata to AppMetaData objects\n     * @param appMetadata\n     */\n    static deserializeAppMetadata(appMetadata: Record<string, SerializedAppMetadataEntity>): AppMetadataCache {\n        const appMetadataObjects: AppMetadataCache = {};\n        if (appMetadata) {\n            Object.keys(appMetadata).map(function (key) {\n                const serializedAmdt = appMetadata[key];\n                const mappedAmd = {\n                    clientId: serializedAmdt.client_id,\n                    environment: serializedAmdt.environment,\n                    familyId: serializedAmdt.family_id,\n                };\n                const amd: AppMetadataEntity = new AppMetadataEntity();\n                CacheManager.toObject(amd, mappedAmd);\n                appMetadataObjects[key] = amd;\n            });\n        }\n\n        return appMetadataObjects;\n    }\n\n    /**\n     * Deserialize an inMemory Cache\n     * @param jsonCache\n     */\n    static deserializeAllCache(jsonCache: JsonCache): InMemoryCache {\n        return {\n            accounts: jsonCache.Account\n                ? this.deserializeAccounts(jsonCache.Account)\n                : {},\n            idTokens: jsonCache.IdToken\n                ? this.deserializeIdTokens(jsonCache.IdToken)\n                : {},\n            accessTokens: jsonCache.AccessToken\n                ? this.deserializeAccessTokens(jsonCache.AccessToken)\n                : {},\n            refreshTokens: jsonCache.RefreshToken\n                ? this.deserializeRefreshTokens(jsonCache.RefreshToken)\n                : {},\n            appMetadata: jsonCache.AppMetadata\n                ? this.deserializeAppMetadata(jsonCache.AppMetadata)\n                : {},\n        };\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountCache, IdTokenCache, AccessTokenCache, RefreshTokenCache, AppMetadataCache } from \"@azure/msal-common\";\nimport { InMemoryCache, JsonCache, SerializedAccountEntity, SerializedIdTokenEntity, SerializedAccessTokenEntity, SerializedRefreshTokenEntity, SerializedAppMetadataEntity } from \"./SerializerTypes\";\n\nexport class Serializer {\n    /**\n     * serialize the JSON blob\n     * @param data\n     */\n    static serializeJSONBlob(data: JsonCache): string {\n        return JSON.stringify(data);\n    }\n\n    /**\n     * Serialize Accounts\n     * @param accCache\n     */\n    static serializeAccounts(accCache: AccountCache): Record<string, SerializedAccountEntity> {\n        const accounts: Record<string, SerializedAccountEntity> = {};\n        Object.keys(accCache).map(function (key) {\n            const accountEntity = accCache[key];\n            accounts[key] = {\n                home_account_id: accountEntity.homeAccountId,\n                environment: accountEntity.environment,\n                realm: accountEntity.realm,\n                local_account_id: accountEntity.localAccountId,\n                username: accountEntity.username,\n                authority_type: accountEntity.authorityType,\n                name: accountEntity.name,\n                client_info: accountEntity.clientInfo,\n                last_modification_time: accountEntity.lastModificationTime,\n                last_modification_app: accountEntity.lastModificationApp,\n            };\n        });\n\n        return accounts;\n    }\n\n    /**\n     * Serialize IdTokens\n     * @param idTCache\n     */\n    static serializeIdTokens(idTCache: IdTokenCache): Record<string, SerializedIdTokenEntity> {\n        const idTokens: Record<string, SerializedIdTokenEntity> = {};\n        Object.keys(idTCache).map(function (key) {\n            const idTEntity = idTCache[key];\n            idTokens[key] = {\n                home_account_id: idTEntity.homeAccountId,\n                environment: idTEntity.environment,\n                credential_type: idTEntity.credentialType,\n                client_id: idTEntity.clientId,\n                secret: idTEntity.secret,\n                realm: idTEntity.realm,\n            };\n        });\n\n        return idTokens;\n    }\n\n    /**\n     * Serializes AccessTokens\n     * @param atCache\n     */\n    static serializeAccessTokens(atCache: AccessTokenCache): Record<string, SerializedAccessTokenEntity> {\n        const accessTokens: Record<string, SerializedAccessTokenEntity> = {};\n        Object.keys(atCache).map(function (key) {\n            const atEntity = atCache[key];\n            accessTokens[key] = {\n                home_account_id: atEntity.homeAccountId,\n                environment: atEntity.environment,\n                credential_type: atEntity.credentialType,\n                client_id: atEntity.clientId,\n                secret: atEntity.secret,\n                realm: atEntity.realm,\n                target: atEntity.target,\n                cached_at: atEntity.cachedAt,\n                expires_on: atEntity.expiresOn,\n                extended_expires_on: atEntity.extendedExpiresOn,\n                refresh_on: atEntity.refreshOn,\n                key_id: atEntity.keyId,\n                token_type: atEntity.tokenType,\n            };\n        });\n\n        return accessTokens;\n    }\n\n    /**\n     * Serialize refreshTokens\n     * @param rtCache\n     */\n    static serializeRefreshTokens(rtCache: RefreshTokenCache): Record<string, SerializedRefreshTokenEntity> {\n        const refreshTokens: Record<string, SerializedRefreshTokenEntity> = {};\n        Object.keys(rtCache).map(function (key) {\n            const rtEntity = rtCache[key];\n            refreshTokens[key] = {\n                home_account_id: rtEntity.homeAccountId,\n                environment: rtEntity.environment,\n                credential_type: rtEntity.credentialType,\n                client_id: rtEntity.clientId,\n                secret: rtEntity.secret,\n                family_id: rtEntity.familyId,\n                target: rtEntity.target,\n                realm: rtEntity.realm\n            };\n        });\n\n        return refreshTokens;\n    }\n\n    /**\n     * Serialize amdtCache\n     * @param amdtCache\n     */\n    static serializeAppMetadata(amdtCache: AppMetadataCache): Record<string, SerializedAppMetadataEntity> {\n        const appMetadata: Record<string, SerializedAppMetadataEntity> = {};\n        Object.keys(amdtCache).map(function (key) {\n            const amdtEntity = amdtCache[key];\n            appMetadata[key] = {\n                client_id: amdtEntity.clientId,\n                environment: amdtEntity.environment,\n                family_id: amdtEntity.familyId,\n            };\n        });\n\n        return appMetadata;\n    }\n\n    /**\n     * Serialize the cache\n     * @param jsonContent\n     */\n    static serializeAllCache(inMemCache: InMemoryCache): JsonCache {\n        return {\n            Account: this.serializeAccounts(inMemCache.accounts),\n            IdToken: this.serializeIdTokens(inMemCache.idTokens),\n            AccessToken: this.serializeAccessTokens(inMemCache.accessTokens),\n            RefreshToken: this.serializeRefreshTokens(inMemCache.refreshTokens),\n            AppMetadata: this.serializeAppMetadata(inMemCache.appMetadata),\n        };\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AccountEntity,\n    IdTokenEntity,\n    AccessTokenEntity,\n    RefreshTokenEntity,\n    AppMetadataEntity,\n    ServerTelemetryEntity,\n    ThrottlingEntity,\n    CacheManager,\n    Logger,\n    ValidCacheType,\n    ICrypto,\n    AuthorityMetadataEntity,\n    ValidCredentialType\n} from \"@azure/msal-common\";\nimport { Deserializer } from \"./serializer/Deserializer\";\nimport { Serializer } from \"./serializer/Serializer\";\nimport { InMemoryCache, JsonCache, CacheKVStore } from \"./serializer/SerializerTypes\";\n\n/**\n * This class implements Storage for node, reading cache from user specified storage location or an  extension library\n * @public\n */\nexport class NodeStorage extends CacheManager {\n    // Cache configuration, either set by user or default values.\n    private logger: Logger;\n    private cache: CacheKVStore = {};\n    private changeEmitters: Array<Function> = [];\n\n    constructor(logger: Logger, clientId: string, cryptoImpl: ICrypto) {\n        super(clientId, cryptoImpl);\n        this.logger = logger;\n    }\n\n    /**\n     * Queue up callbacks\n     * @param func - a callback function for cache change indication\n     */\n    registerChangeEmitter(func: () => void): void {\n        this.changeEmitters.push(func);\n    }\n\n    /**\n     * Invoke the callback when cache changes\n     */\n    emitChange(): void {\n        this.changeEmitters.forEach(func => func.call(null));\n    }\n\n    /**\n     * Converts cacheKVStore to InMemoryCache\n     * @param cache - key value store\n     */\n    cacheToInMemoryCache(cache: CacheKVStore): InMemoryCache {\n\n        const inMemoryCache: InMemoryCache = {\n            accounts: {},\n            idTokens: {},\n            accessTokens: {},\n            refreshTokens: {},\n            appMetadata: {},\n        };\n\n        for (const key in cache) {\n            if (cache[key as string] instanceof AccountEntity) {\n                inMemoryCache.accounts[key] = cache[key] as AccountEntity;\n            } else if (cache[key] instanceof IdTokenEntity) {\n                inMemoryCache.idTokens[key] = cache[key] as IdTokenEntity;\n            } else if (cache[key] instanceof AccessTokenEntity) {\n                inMemoryCache.accessTokens[key] = cache[key] as AccessTokenEntity;\n            } else if (cache[key] instanceof RefreshTokenEntity) {\n                inMemoryCache.refreshTokens[key] = cache[key] as RefreshTokenEntity;\n            } else if (cache[key] instanceof AppMetadataEntity) {\n                inMemoryCache.appMetadata[key] = cache[key] as AppMetadataEntity;\n            } else {\n                continue;\n            }\n        }\n\n        return inMemoryCache;\n    }\n\n    /**\n     * converts inMemoryCache to CacheKVStore\n     * @param inMemoryCache - kvstore map for inmemory\n     */\n    inMemoryCacheToCache(inMemoryCache: InMemoryCache): CacheKVStore {\n        // convert in memory cache to a flat Key-Value map\n        let cache = this.getCache();\n\n        cache = {\n            ...inMemoryCache.accounts,\n            ...inMemoryCache.idTokens,\n            ...inMemoryCache.accessTokens,\n            ...inMemoryCache.refreshTokens,\n            ...inMemoryCache.appMetadata\n        };\n        return cache;\n    }\n\n    /**\n     * gets the current in memory cache for the client\n     */\n    getInMemoryCache(): InMemoryCache {\n        this.logger.trace(\"Getting in-memory cache\");\n\n        // convert the cache key value store to inMemoryCache\n        const inMemoryCache = this.cacheToInMemoryCache(this.getCache());\n        return inMemoryCache;\n    }\n\n    /**\n     * sets the current in memory cache for the client\n     * @param inMemoryCache - key value map in memory\n     */\n    setInMemoryCache(inMemoryCache: InMemoryCache): void{\n        this.logger.trace(\"Setting in-memory cache\");\n\n        // convert and append the inMemoryCache to cacheKVStore\n        const cache = this.inMemoryCacheToCache(inMemoryCache);\n        this.setCache(cache);\n\n        this.emitChange();\n    }\n\n    /**\n     * get the current cache key-value store\n     */\n    getCache(): CacheKVStore {\n        this.logger.trace(\"Getting cache key-value store\");\n        return this.cache;\n    }\n\n    /**\n     * sets the current cache (key value store)\n     * @param cacheMap - key value map\n     */\n    setCache(cache: CacheKVStore): void {\n        this.logger.trace(\"Setting cache key value store\");\n        this.cache = cache;\n\n        // mark change in cache\n        this.emitChange();\n    }\n\n    /**\n     * Gets cache item with given key.\n     * @param key - lookup key for the cache entry\n     */\n    getItem(key: string): ValidCacheType {\n        this.logger.tracePii(`Item key: ${key}`);\n\n        // read cache\n        const cache = this.getCache();\n        return cache[key];\n    }\n\n    /**\n     * Gets cache item with given key-value\n     * @param key - lookup key for the cache entry\n     * @param value - value of the cache entry\n     */\n    setItem(key: string, value: ValidCacheType): void {\n        this.logger.tracePii(`Item key: ${key}`);\n\n        // read cache\n        const cache = this.getCache();\n        cache[key] = value;\n\n        // write to cache\n        this.setCache(cache);\n    }\n\n    /**\n     * fetch the account entity\n     * @param accountKey - lookup key to fetch cache type AccountEntity\n     */\n    getAccount(accountKey: string): AccountEntity | null {\n        const account = this.getItem(accountKey) as AccountEntity;\n        if (AccountEntity.isAccountEntity(account)) {\n            return account;\n        }\n        return null;\n    }\n\n    /**\n     * set account entity\n     * @param account - cache value to be set of type AccountEntity\n     */\n    setAccount(account: AccountEntity): void {\n        const accountKey = account.generateAccountKey();\n        this.setItem(accountKey, account);\n    }\n\n    /**\n     * fetch the idToken credential\n     * @param idTokenKey - lookup key to fetch cache type IdTokenEntity\n     */\n    getIdTokenCredential(idTokenKey: string): IdTokenEntity | null {\n        const idToken = this.getItem(idTokenKey) as IdTokenEntity;\n        if (IdTokenEntity.isIdTokenEntity(idToken)) {\n            return idToken;\n        }\n        return null;\n    }\n\n    /**\n     * set idToken credential\n     * @param idToken - cache value to be set of type IdTokenEntity\n     */\n    setIdTokenCredential(idToken: IdTokenEntity): void {\n        const idTokenKey = idToken.generateCredentialKey();\n        this.setItem(idTokenKey, idToken);\n    }\n\n    /**\n     * fetch the accessToken credential\n     * @param accessTokenKey - lookup key to fetch cache type AccessTokenEntity\n     */\n    getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null {\n        const accessToken = this.getItem(accessTokenKey) as AccessTokenEntity;\n        if (AccessTokenEntity.isAccessTokenEntity(accessToken)) {\n            return accessToken;\n        }\n        return null;\n    }\n\n    /**\n     * set accessToken credential\n     * @param accessToken -  cache value to be set of type AccessTokenEntity\n     */\n    setAccessTokenCredential(accessToken: AccessTokenEntity): void {\n        const accessTokenKey = accessToken.generateCredentialKey();\n        this.setItem(accessTokenKey, accessToken);\n    }\n\n    /**\n     * fetch the refreshToken credential\n     * @param refreshTokenKey - lookup key to fetch cache type RefreshTokenEntity\n     */\n    getRefreshTokenCredential(refreshTokenKey: string): RefreshTokenEntity | null {\n        const refreshToken = this.getItem(refreshTokenKey) as RefreshTokenEntity;\n        if (RefreshTokenEntity.isRefreshTokenEntity(refreshToken)) {\n            return refreshToken as RefreshTokenEntity;\n        }\n        return null;\n    }\n\n    /**\n     * set refreshToken credential\n     * @param refreshToken - cache value to be set of type RefreshTokenEntity\n     */\n    setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void {\n        const refreshTokenKey = refreshToken.generateCredentialKey();\n        this.setItem(refreshTokenKey, refreshToken);\n    }\n\n    /**\n     * fetch appMetadata entity from the platform cache\n     * @param appMetadataKey - lookup key to fetch cache type AppMetadataEntity\n     */\n    getAppMetadata(appMetadataKey: string): AppMetadataEntity | null {\n        const appMetadata: AppMetadataEntity = this.getItem(appMetadataKey) as AppMetadataEntity;\n        if (AppMetadataEntity.isAppMetadataEntity(appMetadataKey, appMetadata)) {\n            return appMetadata;\n        }\n        return null;\n    }\n\n    /**\n     * set appMetadata entity to the platform cache\n     * @param appMetadata - cache value to be set of type AppMetadataEntity\n     */\n    setAppMetadata(appMetadata: AppMetadataEntity): void {\n        const appMetadataKey = appMetadata.generateAppMetadataKey();\n        this.setItem(appMetadataKey, appMetadata);\n    }\n\n    /**\n     * fetch server telemetry entity from the platform cache\n     * @param serverTelemetrykey - lookup key to fetch cache type ServerTelemetryEntity\n     */\n    getServerTelemetry(serverTelemetrykey: string): ServerTelemetryEntity | null {\n        const serverTelemetryEntity: ServerTelemetryEntity = this.getItem(serverTelemetrykey) as ServerTelemetryEntity;\n        if (serverTelemetryEntity && ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetrykey, serverTelemetryEntity)) {\n            return serverTelemetryEntity;\n        }\n        return null;\n    }\n\n    /**\n     * set server telemetry entity to the platform cache\n     * @param serverTelemetryKey - lookup key to fetch cache type ServerTelemetryEntity\n     * @param serverTelemetry - cache value to be set of type ServerTelemetryEntity\n     */\n    setServerTelemetry(serverTelemetryKey: string, serverTelemetry: ServerTelemetryEntity): void {\n        this.setItem(serverTelemetryKey, serverTelemetry);\n    }\n\n    /**\n     * fetch authority metadata entity from the platform cache\n     * @param key - lookup key to fetch cache type AuthorityMetadataEntity\n     */\n    getAuthorityMetadata(key: string): AuthorityMetadataEntity | null {\n        const authorityMetadataEntity: AuthorityMetadataEntity = this.getItem(key) as AuthorityMetadataEntity;\n        if (authorityMetadataEntity && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, authorityMetadataEntity)) {\n            return authorityMetadataEntity;\n        }\n        return null;\n    }\n\n    /**\n     * Get all authority metadata keys\n     */\n    getAuthorityMetadataKeys(): Array<string> {\n        return this.getKeys().filter((key) => {\n            return this.isAuthorityMetadata(key);\n        });\n    }\n\n    /**\n     * set authority metadata entity to the platform cache\n     * @param key - lookup key to fetch cache type AuthorityMetadataEntity\n     * @param metadata - cache value to be set of type AuthorityMetadataEntity\n     */\n    setAuthorityMetadata(key: string, metadata: AuthorityMetadataEntity): void {\n        this.setItem(key, metadata);\n    }\n\n    /**\n     * fetch throttling entity from the platform cache\n     * @param throttlingCacheKey - lookup key to fetch cache type ThrottlingEntity\n     */\n    getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null {\n        const throttlingCache: ThrottlingEntity = this.getItem(throttlingCacheKey) as ThrottlingEntity;\n        if (throttlingCache && ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, throttlingCache)) {\n            return throttlingCache;\n        }\n        return null;\n    }\n\n    /**\n     * set throttling entity to the platform cache\n     * @param throttlingCacheKey - lookup key to fetch cache type ThrottlingEntity\n     * @param throttlingCache - cache value to be set of type ThrottlingEntity\n     */\n    setThrottlingCache(throttlingCacheKey: string, throttlingCache: ThrottlingEntity): void {\n        this.setItem(throttlingCacheKey, throttlingCache);\n    }\n\n    /**\n     * Removes the cache item from memory with the given key.\n     * @param key - lookup key to remove a cache entity\n     * @param inMemory - key value map of the cache\n     */\n    removeItem(key: string): boolean {\n        this.logger.tracePii(`Item key: ${key}`);\n\n        // read inMemoryCache\n        let result: boolean = false;\n        const cache = this.getCache();\n\n        if (!!cache[key]) {\n            delete cache[key];\n            result = true;\n        }\n\n        // write to the cache after removal\n        if (result) {\n            this.setCache(cache);\n            this.emitChange();\n        }\n        return result;\n    }\n\n    /**\n     * Checks whether key is in cache.\n     * @param key - look up key for a cache entity\n     */\n    containsKey(key: string): boolean {\n        return this.getKeys().includes(key);\n    }\n\n    /**\n     * Gets all keys in window.\n     */\n    getKeys(): string[] {\n        this.logger.trace(\"Retrieving all cache keys\");\n\n        // read cache\n        const cache = this.getCache();\n        return [ ...Object.keys(cache)];\n    }\n\n    /**\n     * Clears all cache entries created by MSAL (except tokens).\n     */\n    async clear(): Promise<void> {\n        this.logger.trace(\"Clearing cache entries created by MSAL\");\n\n        // read inMemoryCache\n        const cacheKeys = this.getKeys();\n\n        // delete each element\n        cacheKeys.forEach(key => {\n            this.removeItem(key);\n        });\n        this.emitChange();\n    }\n\n    /**\n     * Initialize in memory cache from an exisiting cache vault\n     * @param cache - blob formatted cache (JSON)\n     */\n    static generateInMemoryCache(cache: string): InMemoryCache {\n        return Deserializer.deserializeAllCache(\n            Deserializer.deserializeJSONBlob(cache)\n        );\n    }\n\n    /**\n     * retrieves the final JSON\n     * @param inMemoryCache - itemised cache read from the JSON\n     */\n    static generateJsonCache(inMemoryCache: InMemoryCache): JsonCache {\n        return Serializer.serializeAllCache(inMemoryCache);\n    }\n\n    /**\n     * Updates a credential's cache key if the current cache key is outdated\n     */\n    updateCredentialCacheKey(currentCacheKey: string, credential: ValidCredentialType): string {\n        const updatedCacheKey = credential.generateCredentialKey();\n\n        if (currentCacheKey !== updatedCacheKey) {\n            const cacheItem = this.getItem(currentCacheKey);\n            if (cacheItem) {\n                this.removeItem(currentCacheKey);\n                this.setItem(updatedCacheKey, cacheItem);\n                this.logger.verbose(`Updated an outdated ${credential.credentialType} cache key`);\n                return updatedCacheKey;\n            } else {\n                this.logger.error(`Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`);\n            }\n        }\n\n        return currentCacheKey;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { NodeStorage } from \"./NodeStorage\";\nimport { StringUtils, AccountEntity, AccountInfo, Logger, ISerializableTokenCache, ICachePlugin, TokenCacheContext } from \"@azure/msal-common\";\nimport { InMemoryCache, JsonCache, SerializedAccountEntity, SerializedAccessTokenEntity, SerializedRefreshTokenEntity, SerializedIdTokenEntity, SerializedAppMetadataEntity, CacheKVStore } from \"./serializer/SerializerTypes\";\nimport { Deserializer } from \"./serializer/Deserializer\";\nimport { Serializer } from \"./serializer/Serializer\";\nimport { ITokenCache } from \"./ITokenCache\";\n\nconst defaultSerializedCache: JsonCache = {\n    Account: {},\n    IdToken: {},\n    AccessToken: {},\n    RefreshToken: {},\n    AppMetadata: {},\n};\n\n/**\n * In-memory token cache manager\n * @public\n */\nexport class TokenCache implements ISerializableTokenCache, ITokenCache {\n\n    private storage: NodeStorage;\n    private cacheHasChanged: boolean;\n    private cacheSnapshot: string;\n    private readonly persistence: ICachePlugin;\n    private logger: Logger;\n\n    constructor(storage: NodeStorage, logger: Logger, cachePlugin?: ICachePlugin) {\n        this.cacheHasChanged = false;\n        this.storage = storage;\n        this.storage.registerChangeEmitter(this.handleChangeEvent.bind(this));\n        if (cachePlugin) {\n            this.persistence = cachePlugin;\n        }\n        this.logger = logger;\n    }\n\n    /**\n     * Set to true if cache state has changed since last time serialize or writeToPersistence was called\n     */\n    hasChanged(): boolean {\n        return this.cacheHasChanged;\n    }\n\n    /**\n     * Serializes in memory cache to JSON\n     */\n    serialize(): string {\n        this.logger.trace(\"Serializing in-memory cache\");\n        let finalState = Serializer.serializeAllCache(\n            this.storage.getInMemoryCache() as InMemoryCache\n        );\n\n        // if cacheSnapshot not null or empty, merge\n        if (!StringUtils.isEmpty(this.cacheSnapshot)) {\n            this.logger.trace(\"Reading cache snapshot from disk\");\n            finalState = this.mergeState(\n                JSON.parse(this.cacheSnapshot),\n                finalState\n            );\n        } else {\n            this.logger.trace(\"No cache snapshot to merge\");\n        }\n        this.cacheHasChanged = false;\n\n        return JSON.stringify(finalState);\n    }\n\n    /**\n     * Deserializes JSON to in-memory cache. JSON should be in MSAL cache schema format\n     * @param cache - blob formatted cache\n     */\n    deserialize(cache: string): void {\n        this.logger.trace(\"Deserializing JSON to in-memory cache\");\n        this.cacheSnapshot = cache;\n\n        if (!StringUtils.isEmpty(this.cacheSnapshot)) {\n            this.logger.trace(\"Reading cache snapshot from disk\");\n            const deserializedCache = Deserializer.deserializeAllCache(\n                this.overlayDefaults(JSON.parse(this.cacheSnapshot))\n            );\n            this.storage.setInMemoryCache(deserializedCache);\n        } else {\n            this.logger.trace(\"No cache snapshot to deserialize\");\n        }\n    }\n\n    /**\n     * Fetches the cache key-value map\n     */\n    getKVStore(): CacheKVStore {\n        return this.storage.getCache();\n    }\n\n    /**\n     * API that retrieves all accounts currently in cache to the user\n     */\n    async getAllAccounts(): Promise<AccountInfo[]> {\n\n        this.logger.trace(\"getAllAccounts called\");\n        let cacheContext;\n        try {\n            if (this.persistence) {\n                cacheContext = new TokenCacheContext(this, false);\n                await this.persistence.beforeCacheAccess(cacheContext);\n            }\n            return this.storage.getAllAccounts();\n        } finally {\n            if (this.persistence && cacheContext) {\n                await this.persistence.afterCacheAccess(cacheContext);\n            }\n        }\n    }\n\n    /**\n     * Returns the signed in account matching homeAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param homeAccountId - unique identifier for an account (uid.utid)\n     */\n    async getAccountByHomeId(homeAccountId: string): Promise<AccountInfo | null> {\n        const allAccounts = await this.getAllAccounts();\n        if (!StringUtils.isEmpty(homeAccountId) && allAccounts && allAccounts.length) {\n            return allAccounts.filter(accountObj => accountObj.homeAccountId === homeAccountId)[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the signed in account matching localAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param localAccountId - unique identifier of an account (sub/obj when homeAccountId cannot be populated)\n     */\n    async getAccountByLocalId(localAccountId: string): Promise<AccountInfo | null> {\n        const allAccounts = await this.getAllAccounts();\n        if (!StringUtils.isEmpty(localAccountId) && allAccounts && allAccounts.length) {\n            return allAccounts.filter(accountObj => accountObj.localAccountId === localAccountId)[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * API to remove a specific account and the relevant data from cache\n     * @param account - AccountInfo passed by the user\n     */\n    async removeAccount(account: AccountInfo): Promise<void> {\n        this.logger.trace(\"removeAccount called\");\n        let cacheContext;\n        try {\n            if (this.persistence) {\n                cacheContext = new TokenCacheContext(this, true);\n                await this.persistence.beforeCacheAccess(cacheContext);\n            }\n            await this.storage.removeAccount(AccountEntity.generateAccountCacheKey(account));\n        } finally {\n            if (this.persistence && cacheContext) {\n                await this.persistence.afterCacheAccess(cacheContext);\n            }\n        }\n    }\n\n    /**\n     * Called when the cache has changed state.\n     */\n    private handleChangeEvent() {\n        this.cacheHasChanged = true;\n    }\n\n    /**\n     * Merge in memory cache with the cache snapshot.\n     * @param oldState - cache before changes\n     * @param currentState - current cache state in the library\n     */\n    private mergeState(oldState: JsonCache, currentState: JsonCache): JsonCache {\n        this.logger.trace(\"Merging in-memory cache with cache snapshot\");\n        const stateAfterRemoval = this.mergeRemovals(oldState, currentState);\n        return this.mergeUpdates(stateAfterRemoval, currentState);\n    }\n\n    /**\n     * Deep update of oldState based on newState values\n     * @param oldState - cache before changes\n     * @param newState - updated cache\n     */\n    private mergeUpdates(oldState: object, newState: object): JsonCache {\n        Object.keys(newState).forEach((newKey: string) => {\n            const newValue = newState[newKey];\n\n            // if oldState does not contain value but newValue does, add it\n            if (!oldState.hasOwnProperty(newKey)) {\n                if (newValue !== null) {\n                    oldState[newKey] = newValue;\n                }\n            } else {\n                // both oldState and newState contain the key, do deep update\n                const newValueNotNull = newValue !== null;\n                const newValueIsObject = typeof newValue === \"object\";\n                const newValueIsNotArray = !Array.isArray(newValue);\n                const oldStateNotUndefinedOrNull = typeof oldState[newKey] !== \"undefined\" && oldState[newKey] !== null;\n\n                if (newValueNotNull && newValueIsObject && newValueIsNotArray && oldStateNotUndefinedOrNull) {\n                    this.mergeUpdates(oldState[newKey], newValue);\n                } else {\n                    oldState[newKey] = newValue;\n                }\n            }\n        });\n\n        return oldState as JsonCache;\n    }\n\n    /**\n     * Removes entities in oldState that the were removed from newState. If there are any unknown values in root of\n     * oldState that are not recognized, they are left untouched.\n     * @param oldState - cache before changes\n     * @param newState - updated cache\n     */\n    private mergeRemovals(oldState: JsonCache, newState: JsonCache): JsonCache {\n        this.logger.trace(\"Remove updated entries in cache\");\n        const accounts = oldState.Account ? this.mergeRemovalsDict<SerializedAccountEntity>(oldState.Account, newState.Account) : oldState.Account;\n        const accessTokens = oldState.AccessToken ? this.mergeRemovalsDict<SerializedAccessTokenEntity>(oldState.AccessToken, newState.AccessToken) : oldState.AccessToken;\n        const refreshTokens = oldState.RefreshToken ? this.mergeRemovalsDict<SerializedRefreshTokenEntity>(oldState.RefreshToken, newState.RefreshToken) : oldState.RefreshToken;\n        const idTokens = oldState.IdToken ? this.mergeRemovalsDict<SerializedIdTokenEntity>(oldState.IdToken, newState.IdToken) : oldState.IdToken;\n        const appMetadata = oldState.AppMetadata ? this.mergeRemovalsDict<SerializedAppMetadataEntity>(oldState.AppMetadata, newState.AppMetadata) : oldState.AppMetadata;\n\n        return {\n            ...oldState,\n            Account: accounts,\n            AccessToken: accessTokens,\n            RefreshToken: refreshTokens,\n            IdToken: idTokens,\n            AppMetadata: appMetadata\n        };\n    }\n\n    /**\n     * Helper to merge new cache with the old one\n     * @param oldState - cache before changes\n     * @param newState - updated cache\n     */\n    private mergeRemovalsDict<T>(oldState: Record<string, T>, newState?: Record<string, T>): Record<string, T> {\n        const finalState = { ...oldState };\n        Object.keys(oldState).forEach((oldKey) => {\n            if (!newState || !(newState.hasOwnProperty(oldKey))) {\n                delete finalState[oldKey];\n            }\n        });\n        return finalState;\n    }\n\n    /**\n     * Helper to overlay as a part of cache merge\n     * @param passedInCache - cache read from the blob\n     */\n    private overlayDefaults(passedInCache: JsonCache): JsonCache {\n        this.logger.trace(\"Overlaying input cache with the default cache\");\n        return {\n            Account: {\n                ...defaultSerializedCache.Account,\n                ...passedInCache.Account,\n            },\n            IdToken: {\n                ...defaultSerializedCache.IdToken,\n                ...passedInCache.IdToken,\n            },\n            AccessToken: {\n                ...defaultSerializedCache.AccessToken,\n                ...passedInCache.AccessToken,\n            },\n            RefreshToken: {\n                ...defaultSerializedCache.RefreshToken,\n                ...passedInCache.RefreshToken,\n            },\n            AppMetadata: {\n                ...defaultSerializedCache.AppMetadata,\n                ...passedInCache.AppMetadata,\n            },\n        };\n    }\n}\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-node\";\nexport const version = \"1.5.0\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AuthorizationCodeClient,\n    ClientConfiguration,\n    RefreshTokenClient,\n    AuthenticationResult,\n    Authority,\n    AuthorityFactory,\n    BaseAuthRequest,\n    SilentFlowClient,\n    Logger,\n    ServerTelemetryManager,\n    ServerTelemetryRequest,\n    CommonSilentFlowRequest,\n    CommonRefreshTokenRequest,\n    CommonAuthorizationCodeRequest,\n    CommonAuthorizationUrlRequest,\n    CommonUsernamePasswordRequest,\n    UsernamePasswordClient,\n    AuthenticationScheme,\n    ResponseMode,\n    AuthorityOptions,\n    OIDC_DEFAULT_SCOPES,\n    AzureRegionConfiguration,\n    AuthError\n} from \"@azure/msal-common\";\nimport { Configuration, buildAppConfiguration, NodeConfiguration } from \"../config/Configuration\";\nimport { CryptoProvider } from \"../crypto/CryptoProvider\";\nimport { NodeStorage } from \"../cache/NodeStorage\";\nimport { Constants as NodeConstants, ApiId } from \"../utils/Constants\";\nimport { TokenCache } from \"../cache/TokenCache\";\nimport { ClientAssertion } from \"./ClientAssertion\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { RefreshTokenRequest } from \"../request/RefreshTokenRequest\";\nimport { SilentFlowRequest } from \"../request/SilentFlowRequest\";\nimport { version, name } from \"../packageMetadata\";\nimport { UsernamePasswordRequest } from \"../request/UsernamePasswordRequest\";\n\n/**\n * Base abstract class for all ClientApplications - public and confidential\n * @public\n */\nexport abstract class ClientApplication {\n\n    private readonly cryptoProvider: CryptoProvider;\n    private tokenCache: TokenCache;\n\n    /**\n     * Platform storage object\n     */\n    protected storage: NodeStorage;\n    /**\n     * Logger object to log the application flow\n     */\n    protected logger: Logger;\n    /**\n     * Platform configuration initialized by the application\n     */\n    protected config: NodeConfiguration;\n    /**\n     * Client assertion passed by the user for confidential client flows\n     */\n    protected clientAssertion: ClientAssertion;\n    /**\n     * Client secret passed by the user for confidential client flows\n     */\n    protected clientSecret: string;\n\n    /**\n     * Constructor for the ClientApplication\n     */\n    protected constructor(configuration: Configuration) {\n        this.config = buildAppConfiguration(configuration);\n        this.cryptoProvider = new CryptoProvider();\n        this.logger = new Logger(this.config.system.loggerOptions, name, version);\n        this.storage = new NodeStorage(this.logger, this.config.auth.clientId, this.cryptoProvider);\n        this.tokenCache = new TokenCache(\n            this.storage,\n            this.logger,\n            this.config.cache.cachePlugin\n        );\n    }\n\n    /**\n     * Creates the URL of the authorization request, letting the user input credentials and consent to the\n     * application. The URL targets the /authorize endpoint of the authority configured in the\n     * application object.\n     *\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\n     * `acquireTokenByCode(AuthorizationCodeRequest)`.\n     */\n    async getAuthCodeUrl(request: AuthorizationUrlRequest): Promise<string> {\n        this.logger.info(\"getAuthCodeUrl called\", request.correlationId);\n        const validRequest: CommonAuthorizationUrlRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request),\n            responseMode: request.responseMode || ResponseMode.QUERY,\n            authenticationScheme: AuthenticationScheme.BEARER\n        };\n\n        const authClientConfig = await this.buildOauthClientConfiguration(\n            validRequest.authority,\n            validRequest.correlationId\n        );\n        const authorizationCodeClient = new AuthorizationCodeClient(\n            authClientConfig\n        );\n        this.logger.verbose(\"Auth code client created\", validRequest.correlationId);\n        return authorizationCodeClient.getAuthCodeUrl(validRequest);\n    }\n\n    /**\n     * Acquires a token by exchanging the Authorization Code received from the first step of OAuth2.0\n     * Authorization Code flow.\n     *\n     * `getAuthCodeUrl(AuthorizationCodeUrlRequest)` can be used to create the URL for the first step of OAuth2.0\n     * Authorization Code flow. Ensure that values for redirectUri and scopes in AuthorizationCodeUrlRequest and\n     * AuthorizationCodeRequest are the same.\n     */\n    async acquireTokenByCode(request: AuthorizationCodeRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenByCode called\", request.correlationId);\n        const validRequest: CommonAuthorizationCodeRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request),\n            authenticationScheme: AuthenticationScheme.BEARER\n        };\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByCode, validRequest.correlationId);\n        try {\n            const authClientConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                validRequest.correlationId,\n                serverTelemetryManager\n            );\n            const authorizationCodeClient = new AuthorizationCodeClient(\n                authClientConfig\n            );\n            this.logger.verbose(\"Auth code client created\", validRequest.correlationId);\n            return authorizationCodeClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n\n    /**\n     * Acquires a token by exchanging the refresh token provided for a new set of tokens.\n     *\n     * This API is provided only for scenarios where you would like to migrate from ADAL to MSAL. Otherwise, it is\n     * recommended that you use `acquireTokenSilent()` for silent scenarios. When using `acquireTokenSilent()`, MSAL will\n     * handle the caching and refreshing of tokens automatically.\n     */\n    async acquireTokenByRefreshToken(request: RefreshTokenRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenByRefreshToken called\", request.correlationId);\n        const validRequest: CommonRefreshTokenRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request),\n            authenticationScheme: AuthenticationScheme.BEARER\n        };\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByRefreshToken, validRequest.correlationId);\n        try {\n            const refreshTokenClientConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                validRequest.correlationId,\n                serverTelemetryManager\n            );\n            const refreshTokenClient = new RefreshTokenClient(\n                refreshTokenClientConfig\n            );\n            this.logger.verbose(\"Refresh token client created\", validRequest.correlationId);\n            return refreshTokenClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n\n    /**\n     * Acquires a token silently when a user specifies the account the token is requested for.\n     *\n     * This API expects the user to provide an account object and looks into the cache to retrieve the token if present.\n     * There is also an optional \"forceRefresh\" boolean the user can send to bypass the cache for access_token and id_token.\n     * In case the refresh_token is expired or not found, an error is thrown\n     * and the guidance is for the user to call any interactive token acquisition API (eg: `acquireTokenByCode()`).\n     */\n    async acquireTokenSilent(request: SilentFlowRequest): Promise<AuthenticationResult | null> {\n        const validRequest: CommonSilentFlowRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request),\n            forceRefresh: request.forceRefresh || false\n        };\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent, validRequest.correlationId, validRequest.forceRefresh);\n        try {\n            const silentFlowClientConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                validRequest.correlationId,\n                serverTelemetryManager\n            );\n            const silentFlowClient = new SilentFlowClient(\n                silentFlowClientConfig\n            );\n            this.logger.verbose(\"Silent flow client created\", validRequest.correlationId);\n            return silentFlowClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n\n    /**\n     * Acquires tokens with password grant by exchanging client applications username and password for credentials\n     *\n     * The latest OAuth 2.0 Security Best Current Practice disallows the password grant entirely.\n     * More details on this recommendation at https://tools.ietf.org/html/draft-ietf-oauth-security-topics-13#section-3.4\n     * Microsoft's documentation and recommendations are at:\n     * https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-authentication-flows#usernamepassword\n     *\n     * @param request - UsenamePasswordRequest\n     */\n    async acquireTokenByUsernamePassword(request: UsernamePasswordRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenByUsernamePassword called\", request.correlationId);\n        const validRequest: CommonUsernamePasswordRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request)\n        };\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByUsernamePassword, validRequest.correlationId);\n        try {\n            const usernamePasswordClientConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                validRequest.correlationId,\n                serverTelemetryManager\n            );\n            const usernamePasswordClient = new UsernamePasswordClient(usernamePasswordClientConfig);\n            this.logger.verbose(\"Username password client created\", validRequest.correlationId);\n            return usernamePasswordClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n\n    /**\n     * Gets the token cache for the application.\n     */\n    getTokenCache(): TokenCache {\n        this.logger.info(\"getTokenCache called\");\n        return this.tokenCache;\n    }\n\n    /**\n     * Returns the logger instance\n     */\n    getLogger(): Logger {\n        return this.logger;\n    }\n\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger - Logger instance\n     */\n    setLogger(logger: Logger): void {\n        this.logger = logger;\n    }\n\n    /**\n     * Builds the common configuration to be passed to the common component based on the platform configurarion\n     * @param authority - user passed authority in configuration\n     * @param serverTelemetryManager - initializes servertelemetry if passed\n     */\n    protected async buildOauthClientConfiguration(authority: string, requestCorrelationId?: string, serverTelemetryManager?: ServerTelemetryManager, azureRegionConfiguration?: AzureRegionConfiguration): Promise<ClientConfiguration> {\n        this.logger.verbose(\"buildOauthClientConfiguration called\", requestCorrelationId);\n        // using null assertion operator as we ensure that all config values have default values in buildConfiguration()\n        this.logger.verbose(`building oauth client configuration with the authority: ${authority}`, requestCorrelationId);\n\n        const discoveredAuthority = await this.createAuthority(authority, azureRegionConfiguration, requestCorrelationId);\n\n        serverTelemetryManager?.updateRegionDiscoveryMetadata(discoveredAuthority.regionDiscoveryMetadata);\n\n        return {\n            authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities\n            },\n            loggerOptions: {\n                logLevel: this.config.system.loggerOptions.logLevel,\n                loggerCallback: this.config.system.loggerOptions\n                    .loggerCallback,\n                piiLoggingEnabled: this.config.system.loggerOptions\n                    .piiLoggingEnabled,\n                correlationId: requestCorrelationId\n            },\n            cryptoInterface: this.cryptoProvider,\n            networkInterface: this.config.system.networkClient,\n            storageInterface: this.storage,\n            serverTelemetryManager: serverTelemetryManager,\n            clientCredentials: {\n                clientSecret: this.clientSecret,\n                clientAssertion: this.clientAssertion ? this.getClientAssertion(discoveredAuthority) : undefined,\n            },\n            libraryInfo: {\n                sku: NodeConstants.MSAL_SKU,\n                version: version,\n                cpu: process.arch || \"\",\n                os: process.platform || \"\",\n            },\n            persistencePlugin: this.config.cache.cachePlugin,\n            serializableCache: this.tokenCache,\n        };\n    }\n\n    private getClientAssertion(authority: Authority): { assertion: string, assertionType: string } {\n        return {\n            assertion: this.clientAssertion.getJwt(this.cryptoProvider, this.config.auth.clientId, authority.tokenEndpoint),\n            assertionType: NodeConstants.JWT_BEARER_ASSERTION_TYPE\n        };\n    }\n\n    /**\n     * Generates a request with the default scopes & generates a correlationId.\n     * @param authRequest - BaseAuthRequest for initialization\n     */\n    protected initializeBaseRequest(authRequest: Partial<BaseAuthRequest>): BaseAuthRequest {\n        this.logger.verbose(\"initializeRequestScopes called\", authRequest.correlationId);\n        // Default authenticationScheme to Bearer, log that POP isn't supported yet\n        if (authRequest.authenticationScheme && authRequest.authenticationScheme === AuthenticationScheme.POP) {\n            this.logger.verbose(\"Authentication Scheme 'pop' is not supported yet, setting Authentication Scheme to 'Bearer' for request\", authRequest.correlationId);\n        }\n\n        authRequest.authenticationScheme = AuthenticationScheme.BEARER;\n\n        return {\n            ...authRequest,\n            scopes: [...((authRequest && authRequest.scopes) || []), ...OIDC_DEFAULT_SCOPES],\n            correlationId: authRequest && authRequest.correlationId || this.cryptoProvider.createNewGuid(),\n            authority: authRequest.authority || this.config.auth.authority\n        };\n    }\n\n    /**\n     * Initializes the server telemetry payload\n     * @param apiId - Id for a specific request\n     * @param correlationId - GUID\n     * @param forceRefresh - boolean to indicate network call\n     */\n    protected initializeServerTelemetryManager(apiId: number, correlationId: string, forceRefresh?: boolean): ServerTelemetryManager {\n        const telemetryPayload: ServerTelemetryRequest = {\n            clientId: this.config.auth.clientId,\n            correlationId: correlationId,\n            apiId: apiId,\n            forceRefresh: forceRefresh || false\n        };\n\n        return new ServerTelemetryManager(telemetryPayload, this.storage);\n    }\n\n    /**\n     * Create authority instance. If authority not passed in request, default to authority set on the application\n     * object. If no authority set in application object, then default to common authority.\n     * @param authorityString - authority from user configuration\n     */\n    private async createAuthority(authorityString: string, azureRegionConfiguration?: AzureRegionConfiguration, requestCorrelationId?: string): Promise<Authority> {\n        this.logger.verbose(\"createAuthority called\", requestCorrelationId);\n        const authorityOptions: AuthorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata,\n            azureRegionConfiguration\n        };\n        return await AuthorityFactory.createDiscoveredInstance(authorityString, this.config.system.networkClient, this.storage, authorityOptions);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ApiId } from \"../utils/Constants\";\nimport {\n    DeviceCodeClient,\n    AuthenticationResult,\n    CommonDeviceCodeRequest,\n    AuthError\n} from \"@azure/msal-common\";\nimport { Configuration } from \"../config/Configuration\";\nimport { ClientApplication } from \"./ClientApplication\";\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\nimport { DeviceCodeRequest } from \"../request/DeviceCodeRequest\";\n\n/**\n * This class is to be used to acquire tokens for public client applications (desktop, mobile). Public client applications\n * are not trusted to safely store application secrets, and therefore can only request tokens in the name of an user.\n * @public\n */\nexport class PublicClientApplication extends ClientApplication implements IPublicClientApplication {\n    /**\n     * Important attributes in the Configuration object for auth are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal.\n     * - authority: the authority URL for your application.\n     *\n     * AAD authorities are of the form https://login.microsoftonline.com/\\{Enter_the_Tenant_Info_Here\\}.\n     * - If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * - If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * - If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * - To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * Azure B2C authorities are of the form https://\\{instance\\}/\\{tenant\\}/\\{policy\\}. Each policy is considered\n     * its own authority. You will have to set the all of the knownAuthorities at the time of the client application\n     * construction.\n     *\n     * ADFS authorities are of the form https://\\{instance\\}/adfs.\n     */\n    constructor(configuration: Configuration) {\n        super(configuration);\n    }\n\n    /**\n     * Acquires a token from the authority using OAuth2.0 device code flow.\n     * This flow is designed for devices that do not have access to a browser or have input constraints.\n     * The authorization server issues a DeviceCode object with a verification code, an end-user code,\n     * and the end-user verification URI. The DeviceCode object is provided through a callback, and the end-user should be\n     * instructed to use another device to navigate to the verification URI to input credentials.\n     * Since the client cannot receive incoming requests, it polls the authorization server repeatedly\n     * until the end-user completes input of credentials.\n     */\n    public async acquireTokenByDeviceCode(request: DeviceCodeRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenByDeviceCode called\", request.correlationId);\n        const validRequest: CommonDeviceCodeRequest = Object.assign(request, this.initializeBaseRequest(request));\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByDeviceCode, validRequest.correlationId);\n        try {\n            const deviceCodeConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                validRequest.correlationId,\n                serverTelemetryManager\n            );\n            const deviceCodeClient = new DeviceCodeClient(deviceCodeConfig);\n            this.logger.verbose(\"Device code client created\", validRequest.correlationId);\n            return deviceCodeClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { JwtHeader, sign } from \"jsonwebtoken\";\nimport { TimeUtils, ClientAuthError } from \"@azure/msal-common\";\nimport { CryptoProvider } from \"../crypto/CryptoProvider\";\nimport { EncodingUtils } from \"../utils/EncodingUtils\";\nimport { JwtConstants } from \"../utils/Constants\";\n\n/**\n * Client assertion of type jwt-bearer used in confidential client flows\n * @public\n */\nexport class ClientAssertion {\n\n    private jwt: string;\n    private privateKey: string;\n    private thumbprint: string;\n    private expirationTime: number;\n    private issuer: string;\n    private jwtAudience: string;\n    private publicCertificate: Array<string>;\n\n    /**\n     * Initialize the ClientAssertion class from the clientAssertion passed by the user\n     * @param assertion - refer https://tools.ietf.org/html/rfc7521\n     */\n    public static fromAssertion(assertion: string): ClientAssertion {\n        const clientAssertion = new ClientAssertion();\n        clientAssertion.jwt = assertion;\n        return clientAssertion;\n    }\n\n    /**\n     * Initialize the ClientAssertion class from the certificate passed by the user\n     * @param thumbprint - identifier of a certificate\n     * @param privateKey - secret key\n     * @param publicCertificate - electronic document provided to prove the ownership of the public key\n     */\n    public static fromCertificate(thumbprint: string, privateKey: string, publicCertificate?: string): ClientAssertion {\n        const clientAssertion = new ClientAssertion();\n        clientAssertion.privateKey = privateKey;\n        clientAssertion.thumbprint = thumbprint;\n        if (publicCertificate) {\n            clientAssertion.publicCertificate = this.parseCertificate(publicCertificate);\n        }\n        return clientAssertion;\n    }\n\n    /**\n     * Update JWT for certificate based clientAssertion, if passed by the user, uses it as is\n     * @param cryptoProvider - library's crypto helper\n     * @param issuer - iss claim\n     * @param jwtAudience - aud claim\n     */\n    public getJwt(cryptoProvider: CryptoProvider, issuer: string, jwtAudience: string): string {\n        // if assertion was created from certificate, check if jwt is expired and create new one.\n        if (this.privateKey && this.thumbprint) {\n\n            if (this.jwt && !this.isExpired() && issuer === this.issuer && jwtAudience === this.jwtAudience) {\n                return this.jwt;\n            }\n\n            return this.createJwt(cryptoProvider, issuer, jwtAudience);\n        }\n\n        /*\n         * if assertion was created by caller, then we just append it. It is up to the caller to\n         * ensure that it contains necessary claims and that it is not expired.\n         */\n        if (this.jwt) {\n            return this.jwt;\n        }\n\n        throw ClientAuthError.createInvalidAssertionError();\n    }\n\n    /**\n     * JWT format and required claims specified: https://tools.ietf.org/html/rfc7523#section-3\n     */\n    private createJwt(cryptoProvider: CryptoProvider, issuer: string, jwtAudience: string): string {\n\n        this.issuer = issuer;\n        this.jwtAudience = jwtAudience;\n        const issuedAt = TimeUtils.nowSeconds();\n        this.expirationTime = issuedAt + 600;\n\n        const header: JwtHeader = {\n            alg: JwtConstants.RSA_256,\n            x5t: EncodingUtils.base64EncodeUrl(this.thumbprint, \"hex\")\n        };\n\n        if (this.publicCertificate) {\n            Object.assign(header, {\n                x5c: this.publicCertificate\n            } as Partial<JwtHeader>);\n        }\n\n        const payload = {\n            [JwtConstants.AUDIENCE]: this.jwtAudience,\n            [JwtConstants.EXPIRATION_TIME]: this.expirationTime,\n            [JwtConstants.ISSUER]: this.issuer,\n            [JwtConstants.SUBJECT]: this.issuer,\n            [JwtConstants.NOT_BEFORE]: issuedAt,\n            [JwtConstants.JWT_ID]: cryptoProvider.createNewGuid()\n        };\n\n        this.jwt = sign(payload, this.privateKey, { header });\n        return this.jwt;\n    }\n\n    /**\n     * Utility API to check expiration\n     */\n    private isExpired(): boolean {\n        return this.expirationTime < TimeUtils.nowSeconds();\n    }\n\n    /**\n     * Extracts the raw certs from a given certificate string and returns them in an array.\n     * @param publicCertificate - electronic document provided to prove the ownership of the public key\n     */\n    public static parseCertificate(publicCertificate: string): Array<string> {\n        /**\n         * This is regex to identify the certs in a given certificate string.\n         * We want to look for the contents between the BEGIN and END certificate strings, without the associated newlines.\n         * The information in parens \"(.+?)\" is the capture group to represent the cert we want isolated.\n         * \".\" means any string character, \"+\" means match 1 or more times, and \"?\" means the shortest match.\n         * The \"g\" at the end of the regex means search the string globally, and the \"s\" enables the \".\" to match newlines.\n         */\n        const regexToFindCerts = /-----BEGIN CERTIFICATE-----\\n(.+?)\\n-----END CERTIFICATE-----/gs;\n        const certs: string[] = [];\n\n        let matches;\n        while ((matches = regexToFindCerts.exec(publicCertificate)) !== null) {\n            // matches[1] represents the first parens capture group in the regex.\n            certs.push(matches[1].replace(/\\n/, \"\"));\n        }\n\n        return certs;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientApplication } from \"./ClientApplication\";\nimport { Configuration } from \"../config/Configuration\";\nimport { ClientAssertion } from \"./ClientAssertion\";\nimport { ApiId , REGION_ENVIRONMENT_VARIABLE } from \"../utils/Constants\";\nimport {\n    ClientCredentialClient,\n    OnBehalfOfClient,\n    CommonClientCredentialRequest,\n    CommonOnBehalfOfRequest,\n    AuthenticationResult,\n    StringUtils,\n    ClientAuthError,\n    AzureRegionConfiguration,\n    AuthError\n} from \"@azure/msal-common\";\nimport { IConfidentialClientApplication } from \"./IConfidentialClientApplication\";\nimport { OnBehalfOfRequest } from \"../request/OnBehalfOfRequest\";\nimport { ClientCredentialRequest } from \"../request/ClientCredentialRequest\";\n\n/**\n *  This class is to be used to acquire tokens for confidential client applications (webApp, webAPI). Confidential client applications\n *  will configure application secrets, client certificates/assertions as applicable\n * @public\n */\nexport class ConfidentialClientApplication extends ClientApplication implements IConfidentialClientApplication{\n\n    /**\n     * Constructor for the ConfidentialClientApplication\n     *\n     * Required attributes in the Configuration object are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our application registration portal\n     * - authority: the authority URL for your application.\n     * - client credential: Must set either client secret, certificate, or assertion for confidential clients. You can obtain a client secret from the application registration portal.\n     *\n     * In Azure AD, authority is a URL indicating of the form https://login.microsoftonline.com/\\{Enter_the_Tenant_Info_Here\\}.\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * In Azure B2C, authority is of the form https://\\{instance\\}/tfp/\\{tenant\\}/\\{policyName\\}/\n     * Full B2C functionality will be available in this library in future versions.\n     *\n     * @param Configuration - configuration object for the MSAL ConfidentialClientApplication instance\n     */\n    constructor(configuration: Configuration) {\n        super(configuration);\n        this.setClientCredential(this.config);\n    }\n\n    /**\n     * Acquires tokens from the authority for the application (not for an end user).\n     */\n    public async acquireTokenByClientCredential(request: ClientCredentialRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenByClientCredential called\", request.correlationId);\n        const validRequest: CommonClientCredentialRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request)\n        };\n        const azureRegionConfiguration: AzureRegionConfiguration = {\n            azureRegion: validRequest.azureRegion,\n            environmentRegion: process.env[REGION_ENVIRONMENT_VARIABLE] \n        };\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByClientCredential, validRequest.correlationId, validRequest.skipCache);\n        try {\n            const clientCredentialConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                validRequest.correlationId,\n                serverTelemetryManager,\n                azureRegionConfiguration,\n            );\n            const clientCredentialClient = new ClientCredentialClient(clientCredentialConfig);\n            this.logger.verbose(\"Client credential client created\", validRequest.correlationId);\n            return clientCredentialClient.acquireToken(validRequest);\n        } catch(e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n\n    /**\n     * Acquires tokens from the authority for the application.\n     *\n     * Used in scenarios where the current app is a middle-tier service which was called with a token\n     * representing an end user. The current app can use the token (oboAssertion) to request another\n     * token to access downstream web API, on behalf of that user.\n     *\n     * The current middle-tier app has no user interaction to obtain consent.\n     * See how to gain consent upfront for your middle-tier app from this article.\n     * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#gaining-consent-for-the-middle-tier-application\n     */\n    public async acquireTokenOnBehalfOf(request: OnBehalfOfRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenOnBehalfOf called\", request.correlationId);\n        const validRequest: CommonOnBehalfOfRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request)\n        };\n        try {\n            const clientCredentialConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                validRequest.correlationId\n            );\n            const oboClient = new OnBehalfOfClient(clientCredentialConfig);\n            this.logger.verbose(\"On behalf of client created\", validRequest.correlationId);\n            return oboClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            throw e;\n        }\n    }\n\n    private setClientCredential(configuration: Configuration): void {\n\n        const clientSecretNotEmpty = !StringUtils.isEmpty(configuration.auth.clientSecret);\n        const clientAssertionNotEmpty = !StringUtils.isEmpty(configuration.auth.clientAssertion);\n        const certificate = configuration.auth.clientCertificate || {\n            thumbprint: \"\",\n            privateKey: \"\"\n        };\n        const certificateNotEmpty = !StringUtils.isEmpty(certificate.thumbprint) || !StringUtils.isEmpty(certificate.privateKey);\n\n        // Check that at most one credential is set on the application\n        if (\n            clientSecretNotEmpty && clientAssertionNotEmpty ||\n            clientAssertionNotEmpty && certificateNotEmpty ||\n            clientSecretNotEmpty && certificateNotEmpty) {\n            throw ClientAuthError.createInvalidCredentialError();\n        }\n\n        if (configuration.auth.clientSecret) {\n            this.clientSecret = configuration.auth.clientSecret;\n            return;\n        }\n\n        if (configuration.auth.clientAssertion) {\n            this.clientAssertion = ClientAssertion.fromAssertion(configuration.auth.clientAssertion);\n            return;\n        }\n\n        if (!certificateNotEmpty) {\n            throw ClientAuthError.createInvalidCredentialError();\n        } else {\n            this.clientAssertion = ClientAssertion.fromCertificate(certificate.thumbprint, certificate.privateKey, configuration.auth.clientCertificate?.x5c);\n        }\n    }\n}\n"],"names":["HttpMethod","REGION_ENVIRONMENT_VARIABLE","RANDOM_OCTET_SIZE","Hash","SHA256","CharSet","CV_CHARSET","Constants","MSAL_SKU","JWT_BEARER_ASSERTION_TYPE","ApiId","JwtConstants","ALGORITHM","RSA_256","X5T","X5C","AUDIENCE","EXPIRATION_TIME","ISSUER","SUBJECT","NOT_BEFORE","JWT_ID","HttpClient","sendGetRequestAsync","url","options","request","method","GET","headers","validateStatus","response","axios","body","data","status","sendPostRequestAsync","cancellationToken","POST","timeout","NetworkUtils","getNetworkClient","DEFAULT_AUTH_OPTIONS","clientId","authority","DEFAULT_AUTHORITY","clientSecret","clientAssertion","clientCertificate","thumbprint","privateKey","x5c","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","clientCapabilities","protocolMode","ProtocolMode","AAD","DEFAULT_CACHE_OPTIONS","DEFAULT_LOGGER_OPTIONS","loggerCallback","piiLoggingEnabled","logLevel","LogLevel","Info","DEFAULT_SYSTEM_OPTIONS","loggerOptions","networkClient","buildAppConfiguration","auth","cache","system","GuidGenerator","generateGuid","uuidv4","isGuid","guid","regexGuid","test","EncodingUtils","base64Encode","str","encoding","Buffer","from","toString","base64EncodeUrl","replace","base64Decode","base64Str","base64DecodeUrl","length","PkceGenerator","generatePkceCodes","verifier","generateCodeVerifier","challenge","generateCodeChallengeFromVerifier","charArr","maxNumber","byte","crypto","randomBytes","index","push","join","codeVerifier","sha256","buffer","createHash","update","digest","CryptoProvider","constructor","pkceGenerator","createNewGuid","input","getPublicKeyThumbprint","Error","removeTokenBindingKey","clearKeystore","signJwt","hashString","Deserializer","deserializeJSONBlob","jsonFile","deserializedCache","StringUtils","isEmpty","JSON","parse","deserializeAccounts","accounts","accountObjects","Object","keys","map","key","serializedAcc","mappedAcc","homeAccountId","home_account_id","environment","realm","localAccountId","local_account_id","username","authorityType","authority_type","name","clientInfo","client_info","lastModificationTime","last_modification_time","lastModificationApp","last_modification_app","account","AccountEntity","CacheManager","toObject","deserializeIdTokens","idTokens","idObjects","serializedIdT","mappedIdT","credentialType","credential_type","client_id","secret","idToken","IdTokenEntity","deserializeAccessTokens","accessTokens","atObjects","serializedAT","mappedAT","target","cachedAt","cached_at","expiresOn","expires_on","extendedExpiresOn","extended_expires_on","refreshOn","refresh_on","keyId","key_id","tokenType","token_type","accessToken","AccessTokenEntity","deserializeRefreshTokens","refreshTokens","rtObjects","serializedRT","mappedRT","familyId","family_id","refreshToken","RefreshTokenEntity","deserializeAppMetadata","appMetadata","appMetadataObjects","serializedAmdt","mappedAmd","amd","AppMetadataEntity","deserializeAllCache","jsonCache","Account","IdToken","AccessToken","RefreshToken","AppMetadata","Serializer","serializeJSONBlob","stringify","serializeAccounts","accCache","accountEntity","serializeIdTokens","idTCache","idTEntity","serializeAccessTokens","atCache","atEntity","serializeRefreshTokens","rtCache","rtEntity","serializeAppMetadata","amdtCache","amdtEntity","serializeAllCache","inMemCache","NodeStorage","logger","cryptoImpl","registerChangeEmitter","func","changeEmitters","emitChange","forEach","call","cacheToInMemoryCache","inMemoryCache","inMemoryCacheToCache","getCache","getInMemoryCache","trace","setInMemoryCache","setCache","getItem","tracePii","setItem","value","getAccount","accountKey","isAccountEntity","setAccount","generateAccountKey","getIdTokenCredential","idTokenKey","isIdTokenEntity","setIdTokenCredential","generateCredentialKey","getAccessTokenCredential","accessTokenKey","isAccessTokenEntity","setAccessTokenCredential","getRefreshTokenCredential","refreshTokenKey","isRefreshTokenEntity","setRefreshTokenCredential","getAppMetadata","appMetadataKey","isAppMetadataEntity","setAppMetadata","generateAppMetadataKey","getServerTelemetry","serverTelemetrykey","serverTelemetryEntity","ServerTelemetryEntity","isServerTelemetryEntity","setServerTelemetry","serverTelemetryKey","serverTelemetry","getAuthorityMetadata","authorityMetadataEntity","AuthorityMetadataEntity","isAuthorityMetadataEntity","getAuthorityMetadataKeys","getKeys","filter","isAuthorityMetadata","setAuthorityMetadata","metadata","getThrottlingCache","throttlingCacheKey","throttlingCache","ThrottlingEntity","isThrottlingEntity","setThrottlingCache","removeItem","result","containsKey","includes","clear","cacheKeys","generateInMemoryCache","generateJsonCache","updateCredentialCacheKey","currentCacheKey","credential","updatedCacheKey","cacheItem","verbose","error","defaultSerializedCache","TokenCache","storage","cachePlugin","cacheHasChanged","handleChangeEvent","bind","persistence","hasChanged","serialize","finalState","cacheSnapshot","mergeState","deserialize","overlayDefaults","getKVStore","getAllAccounts","cacheContext","TokenCacheContext","beforeCacheAccess","afterCacheAccess","getAccountByHomeId","allAccounts","accountObj","getAccountByLocalId","removeAccount","generateAccountCacheKey","oldState","currentState","stateAfterRemoval","mergeRemovals","mergeUpdates","newState","newKey","newValue","hasOwnProperty","newValueNotNull","newValueIsObject","newValueIsNotArray","Array","isArray","oldStateNotUndefinedOrNull","mergeRemovalsDict","oldKey","passedInCache","version","ClientApplication","configuration","config","cryptoProvider","Logger","tokenCache","getAuthCodeUrl","info","correlationId","validRequest","initializeBaseRequest","responseMode","ResponseMode","QUERY","authenticationScheme","AuthenticationScheme","BEARER","authClientConfig","buildOauthClientConfiguration","authorizationCodeClient","AuthorizationCodeClient","acquireTokenByCode","serverTelemetryManager","initializeServerTelemetryManager","acquireToken","e","AuthError","setCorrelationId","cacheFailedRequest","acquireTokenByRefreshToken","refreshTokenClientConfig","refreshTokenClient","RefreshTokenClient","acquireTokenSilent","forceRefresh","silentFlowClientConfig","silentFlowClient","SilentFlowClient","acquireTokenByUsernamePassword","usernamePasswordClientConfig","usernamePasswordClient","UsernamePasswordClient","getTokenCache","getLogger","setLogger","requestCorrelationId","azureRegionConfiguration","discoveredAuthority","createAuthority","updateRegionDiscoveryMetadata","regionDiscoveryMetadata","authOptions","cryptoInterface","networkInterface","storageInterface","clientCredentials","getClientAssertion","undefined","libraryInfo","sku","NodeConstants","cpu","process","arch","os","platform","persistencePlugin","serializableCache","assertion","getJwt","tokenEndpoint","assertionType","authRequest","POP","scopes","OIDC_DEFAULT_SCOPES","apiId","telemetryPayload","ServerTelemetryManager","authorityString","authorityOptions","AuthorityFactory","createDiscoveredInstance","PublicClientApplication","acquireTokenByDeviceCode","assign","deviceCodeConfig","deviceCodeClient","DeviceCodeClient","ClientAssertion","fromAssertion","jwt","fromCertificate","publicCertificate","parseCertificate","issuer","jwtAudience","isExpired","createJwt","ClientAuthError","createInvalidAssertionError","issuedAt","TimeUtils","nowSeconds","expirationTime","header","alg","x5t","payload","sign","regexToFindCerts","certs","matches","exec","ConfidentialClientApplication","setClientCredential","acquireTokenByClientCredential","azureRegion","environmentRegion","env","skipCache","clientCredentialConfig","clientCredentialClient","ClientCredentialClient","acquireTokenOnBehalfOf","oboClient","OnBehalfOfClient","clientSecretNotEmpty","clientAssertionNotEmpty","certificate","certificateNotEmpty","createInvalidCredentialError"],"mappings":";;;;;;;;;;;;AAAA;;;;;AAKA;;;AAGA,IAAYA,UAAZ;;AAAA,WAAYA;AACRA,EAAAA,iBAAA,QAAA;AACAA,EAAAA,kBAAA,SAAA;AACH,CAHD,EAAYA,UAAU,KAAVA,UAAU,KAAA,CAAtB;AAKA;;;;;AAGO,MAAMC,2BAA2B,GAAG,aAApC;AAEP;;;;AAGO,MAAMC,iBAAiB,GAAG,EAA1B;AAEP;;;;AAGO,MAAMC,IAAI,GAAG;AAChBC,EAAAA,MAAM,EAAE;AADQ,CAAb;AAIP;;;;AAGO,MAAMC,OAAO,GAAG;AACnBC,EAAAA,UAAU,EACN;AAFe,CAAhB;AAaP;;;;AAGO,MAAMC,SAAS,GAAG;AACrBC,EAAAA,QAAQ,EAAE,cADW;AAErBC,EAAAA,yBAAyB,EAAE;AAFN,CAAlB;AAKP;;;;;;;;AAOA,IAAYC,KAAZ;;AAAA,WAAYA;AACRA,EAAAA,uCAAA,uBAAA;AACAA,EAAAA,oDAAA,mCAAA;AACAA,EAAAA,8CAAA,6BAAA;AACAA,EAAAA,oDAAA,mCAAA;AACAA,EAAAA,wCAAA,uBAAA;AACAA,EAAAA,gDAAA,+BAAA;AACH,CAPD,EAAYA,KAAK,KAALA,KAAK,KAAA,CAAjB;AASA;;;;;AAGO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,KADa;AAExBC,EAAAA,OAAO,EAAE,OAFe;AAGxBC,EAAAA,GAAG,EAAE,KAHmB;AAIxBC,EAAAA,GAAG,EAAE,KAJmB;AAKxBC,EAAAA,QAAQ,EAAE,KALc;AAMxBC,EAAAA,eAAe,EAAE,KANO;AAOxBC,EAAAA,MAAM,EAAE,KAPgB;AAQxBC,EAAAA,OAAO,EAAE,KARe;AASxBC,EAAAA,UAAU,EAAE,KATY;AAUxBC,EAAAA,MAAM,EAAE;AAVgB,CAArB;;ACzEP;;;;AAUA,AAGA;;;;AAGA,MAAaC;AAET;;;;;AAKyB,QAAnBC,mBAAmB,CACrBC,GADqB,EAErBC,OAFqB;AAIrB,UAAMC,OAAO,GAAuB;AAChCC,MAAAA,MAAM,EAAE3B,UAAU,CAAC4B,GADa;AAEhCJ,MAAAA,GAAG,EAAEA,GAF2B;;AAGhC;AACAK,MAAAA,OAAO,EAAEJ,OAAO,IAAIA,OAAO,CAACI,OAJI;;AAKhC;AACAC,MAAAA,cAAc,EAAE,MAAM;AANU,KAApC;AASA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,OAAD,CAA5B;AACA,WAAO;AACHG,MAAAA,OAAO,EAAEE,QAAQ,CAACF,OADf;AAEHI,MAAAA,IAAI,EAAEF,QAAQ,CAACG,IAFZ;AAGHC,MAAAA,MAAM,EAAEJ,QAAQ,CAACI;AAHd,KAAP;AAKH;AAED;;;;;;;AAK0B,QAApBC,oBAAoB,CACtBZ,GADsB,EAEtBC,OAFsB,EAGtBY,iBAHsB;AAKtB,UAAMX,OAAO,GAAuB;AAChCC,MAAAA,MAAM,EAAE3B,UAAU,CAACsC,IADa;AAEhCd,MAAAA,GAAG,EAAEA,GAF2B;;AAGhC;AACAU,MAAAA,IAAI,EAAGT,OAAO,IAAIA,OAAO,CAACQ,IAApB,IAA6B,EAJH;AAKhCM,MAAAA,OAAO,EAAEF,iBALuB;;AAMhC;AACAR,MAAAA,OAAO,EAAEJ,OAAO,IAAIA,OAAO,CAACI,OAPI;;AAQhC;AACAC,MAAAA,cAAc,EAAE,MAAM;AATU,KAApC;AAYA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,OAAD,CAA5B;AACA,WAAO;AACHG,MAAAA,OAAO,EAAEE,QAAQ,CAACF,OADf;AAEHI,MAAAA,IAAI,EAAEF,QAAQ,CAACG,IAFZ;AAGHC,MAAAA,MAAM,EAAEJ,QAAQ,CAACI;AAHd,KAAP;AAKH;;;;ACxEL;;;;AAMA,MAEaK;AACT;;;AAGuB,SAAhBC,gBAAgB;AACnB,WAAO,IAAInB,UAAJ,EAAP;AACH;;;;ACdL;;;;AAKA,AAwEA,MAAMoB,oBAAoB,GAA8B;AACpDC,EAAAA,QAAQ,EAAE,EAD0C;AAEpDC,EAAAA,SAAS,EAAErC,oBAAS,CAACsC,iBAF+B;AAGpDC,EAAAA,YAAY,EAAE,EAHsC;AAIpDC,EAAAA,eAAe,EAAE,EAJmC;AAKpDC,EAAAA,iBAAiB,EAAE;AACfC,IAAAA,UAAU,EAAE,EADG;AAEfC,IAAAA,UAAU,EAAE,EAFG;AAGfC,IAAAA,GAAG,EAAE;AAHU,GALiC;AAUpDC,EAAAA,gBAAgB,EAAE,EAVkC;AAWpDC,EAAAA,sBAAsB,EAAE,EAX4B;AAYpDC,EAAAA,iBAAiB,EAAE,EAZiC;AAapDC,EAAAA,kBAAkB,EAAE,EAbgC;AAcpDC,EAAAA,YAAY,EAAEC,uBAAY,CAACC;AAdyB,CAAxD;AAiBA,MAAMC,qBAAqB,GAAiB,EAA5C;AAEA,MAAMC,sBAAsB,GAAkB;AAC1CC,EAAAA,cAAc,EAAE;AAEf,GAHyC;AAI1CC,EAAAA,iBAAiB,EAAE,KAJuB;AAK1CC,EAAAA,QAAQ,EAAEC,mBAAQ,CAACC;AALuB,CAA9C;AAQA,MAAMC,sBAAsB,GAAgC;AACxDC,EAAAA,aAAa,EAAEP,sBADyC;AAExDQ,EAAAA,aAAa,eAAE5B,YAAY,CAACC,gBAAb;AAFyC,CAA5D;AAWA;;;;;;;;;;;AAUA,SAAgB4B,sBAAsB;AAClCC,EAAAA,IADkC;AAElCC,EAAAA,KAFkC;AAGlCC,EAAAA;AAHkC;AAKlC,SAAO;AACHF,IAAAA,IAAI,EAAE,EAAE,GAAG5B,oBAAL;AAA2B,SAAG4B;AAA9B,KADH;AAEHC,IAAAA,KAAK,EAAE,EAAE,GAAGZ,qBAAL;AAA4B,SAAGY;AAA/B,KAFJ;AAGHC,IAAAA,MAAM,EAAE,EAAE,GAAGN,sBAAL;AAA6B,SAAGM;AAAhC;AAHL,GAAP;AAKH;;ACvID;;;;AAKA,MAEaC;AACT;;;;;AAKmB,SAAZC,YAAY;AACf,WAAOC,OAAM,EAAb;AACH;AAED;;;;;;AAIa,SAANC,MAAM,CAACC,IAAD;AACT,UAAMC,SAAS,GAAG,4EAAlB;AACA,WAAOA,SAAS,CAACC,IAAV,CAAeF,IAAf,CAAP;AACH;;;;ACxBL;;;;AAKA,MAAaG;AACT;;;;;;AAMmB,SAAZC,YAAY,CAACC,GAAD,EAAcC,QAAd;AACf,WAAOC,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBC,QAAjB,EAA2BG,QAA3B,CAAoC,QAApC,CAAP;AACH;AAED;;;;;;AAIsB,SAAfC,eAAe,CAACL,GAAD,EAAcC,QAAd;AAClB,WAAOH,aAAa,CAACC,YAAd,CAA2BC,GAA3B,EAAgCC,QAAhC,EACFK,OADE,CACM,IADN,EACY,EADZ,EAEFA,OAFE,CAEM,KAFN,EAEa,GAFb,EAGFA,OAHE,CAGM,KAHN,EAGa,GAHb,CAAP;AAIH;AAED;;;;;;;;AAMmB,SAAZC,YAAY,CAACC,SAAD;AACf,WAAON,MAAM,CAACC,IAAP,CAAYK,SAAZ,EAAuB,QAAvB,EAAiCJ,QAAjC,CAA0C,MAA1C,CAAP;AACH;AAED;;;;;AAGsB,SAAfK,eAAe,CAACD,SAAD;AAClB,QAAIR,GAAG,GAAGQ,SAAS,CAACF,OAAV,CAAkB,IAAlB,EAAwB,GAAxB,EAA6BA,OAA7B,CAAqC,IAArC,EAA2C,GAA3C,CAAV;;AACA,WAAON,GAAG,CAACU,MAAJ,GAAa,CAApB,EAAuB;AACnBV,MAAAA,GAAG,IAAI,GAAP;AACH;;AACD,WAAOF,aAAa,CAACS,YAAd,CAA2BP,GAA3B,CAAP;AACH;;;;AC9CL;;;;AAMA,AAIA;;;;AAGA,MAAaW;AACT;;;;AAIuB,QAAjBC,iBAAiB;AACnB,UAAMC,QAAQ,GAAG,KAAKC,oBAAL,EAAjB;AACA,UAAMC,SAAS,GAAG,KAAKC,iCAAL,CAAuCH,QAAvC,CAAlB;AACA,WAAO;AAAEA,MAAAA,QAAF;AAAYE,MAAAA;AAAZ,KAAP;AACH;AAED;;;;;AAGQD,EAAAA,oBAAoB;AACxB,UAAMG,OAAO,GAAG,EAAhB;AACA,UAAMC,SAAS,GAAG,MAAO,MAAM/F,OAAO,CAACC,UAAR,CAAmBsF,MAAlD;;AACA,WAAOO,OAAO,CAACP,MAAR,IAAkB1F,iBAAzB,EAA4C;AACxC,YAAMmG,IAAI,GAAGC,MAAM,CAACC,WAAP,CAAmB,CAAnB,EAAsB,CAAtB,CAAb;;AACA,UAAIF,IAAI,IAAID,SAAZ,EAAuB;AACnB;;;;AAIA;AACH;;AACD,YAAMI,KAAK,GAAGH,IAAI,GAAGhG,OAAO,CAACC,UAAR,CAAmBsF,MAAxC;AACAO,MAAAA,OAAO,CAACM,IAAR,CAAapG,OAAO,CAACC,UAAR,CAAmBkG,KAAnB,CAAb;AACH;;AACD,UAAMT,QAAQ,GAAWI,OAAO,CAACO,IAAR,CAAa,EAAb,CAAzB;AACA,WAAO1B,aAAa,CAACO,eAAd,CAA8BQ,QAA9B,CAAP;AACH;AAED;;;;;;AAIQG,EAAAA,iCAAiC,CAACS,YAAD;AACrC,WAAO3B,aAAa,CAACO,eAAd,CACH,KAAKqB,MAAL,CAAYD,YAAZ,EAA0BrB,QAA1B,CAAmC,QAAnC,CADG,EAEH,QAFG,CAAP;AAIH;AAED;;;;;;AAIQsB,EAAAA,MAAM,CAACC,MAAD;AACV,WAAOP,MAAM,CACRQ,UADE,CACS3G,IAAI,CAACC,MADd,EAEF2G,MAFE,CAEKF,MAFL,EAGFG,MAHE,EAAP;AAIH;;;;AClEL;;;;AAMA,AAIA;;;;;;AAKA,MAAaC;AAGTC,EAAAA;AACI;AACA,SAAKC,aAAL,GAAqB,IAAItB,aAAJ,EAArB;AACH;AAED;;;;;;AAIAuB,EAAAA,aAAa;AACT,WAAO3C,aAAa,CAACC,YAAd,EAAP;AACH;AAED;;;;;;AAIAO,EAAAA,YAAY,CAACoC,KAAD;AACR,WAAOrC,aAAa,CAACC,YAAd,CAA2BoC,KAA3B,CAAP;AACH;AAED;;;;;;AAIA5B,EAAAA,YAAY,CAAC4B,KAAD;AACR,WAAOrC,aAAa,CAACS,YAAd,CAA2B4B,KAA3B,CAAP;AACH;AAED;;;;;AAGAvB,EAAAA,iBAAiB;AACb,WAAO,KAAKqB,aAAL,CAAmBrB,iBAAnB,EAAP;AACH;AAED;;;;;AAGAwB,EAAAA,sBAAsB;AAClB,UAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACH;AAED;;;;;;AAIAC,EAAAA,qBAAqB;AACjB,UAAM,IAAID,KAAJ,CAAU,yBAAV,CAAN;AACH;AAED;;;;;AAGAE,EAAAA,aAAa;AACT,UAAM,IAAIF,KAAJ,CAAU,yBAAV,CAAN;AACH;AAED;;;;;AAGAG,EAAAA,OAAO;AACH,UAAM,IAAIH,KAAJ,CAAU,yBAAV,CAAN;AACH;AAED;;;;;AAGAI,EAAAA,UAAU;AACN,UAAM,IAAIJ,KAAJ,CAAU,yBAAV,CAAN;AACH;;;;ACxFL;;;;AAKA,AAGA;;;;AAGA,MAAaK;AACT;;;;AAI0B,SAAnBC,mBAAmB,CAACC,QAAD;AACtB,UAAMC,iBAAiB,GAAGC,sBAAW,CAACC,OAAZ,CAAoBH,QAApB,IACpB,EADoB,GAEpBI,IAAI,CAACC,KAAL,CAAWL,QAAX,CAFN;AAGA,WAAOC,iBAAP;AACH;AAED;;;;;;AAI0B,SAAnBK,mBAAmB,CAACC,QAAD;AACtB,UAAMC,cAAc,GAAiB,EAArC;;AACA,QAAID,QAAJ,EAAc;AACVE,MAAAA,MAAM,CAACC,IAAP,CAAYH,QAAZ,EAAsBI,GAAtB,CAA0B,UAAUC,GAAV;AACtB,cAAMC,aAAa,GAAGN,QAAQ,CAACK,GAAD,CAA9B;AACA,cAAME,SAAS,GAAG;AACdC,UAAAA,aAAa,EAAEF,aAAa,CAACG,eADf;AAEdC,UAAAA,WAAW,EAAEJ,aAAa,CAACI,WAFb;AAGdC,UAAAA,KAAK,EAAEL,aAAa,CAACK,KAHP;AAIdC,UAAAA,cAAc,EAAEN,aAAa,CAACO,gBAJhB;AAKdC,UAAAA,QAAQ,EAAER,aAAa,CAACQ,QALV;AAMdC,UAAAA,aAAa,EAAET,aAAa,CAACU,cANf;AAOdC,UAAAA,IAAI,EAAEX,aAAa,CAACW,IAPN;AAQdC,UAAAA,UAAU,EAAEZ,aAAa,CAACa,WARZ;AASdC,UAAAA,oBAAoB,EAAEd,aAAa,CAACe,sBATtB;AAUdC,UAAAA,mBAAmB,EAAEhB,aAAa,CAACiB;AAVrB,SAAlB;AAYA,cAAMC,OAAO,GAAkB,IAAIC,wBAAJ,EAA/B;AACAC,QAAAA,uBAAY,CAACC,QAAb,CAAsBH,OAAtB,EAA+BjB,SAA/B;AACAN,QAAAA,cAAc,CAACI,GAAD,CAAd,GAAsBmB,OAAtB;AACH,OAjBD;AAkBH;;AAED,WAAOvB,cAAP;AACH;AAED;;;;;;AAI0B,SAAnB2B,mBAAmB,CAACC,QAAD;AACtB,UAAMC,SAAS,GAAiB,EAAhC;;AACA,QAAID,QAAJ,EAAc;AACV3B,MAAAA,MAAM,CAACC,IAAP,CAAY0B,QAAZ,EAAsBzB,GAAtB,CAA0B,UAAUC,GAAV;AACtB,cAAM0B,aAAa,GAAGF,QAAQ,CAACxB,GAAD,CAA9B;AACA,cAAM2B,SAAS,GAAG;AACdxB,UAAAA,aAAa,EAAEuB,aAAa,CAACtB,eADf;AAEdC,UAAAA,WAAW,EAAEqB,aAAa,CAACrB,WAFb;AAGduB,UAAAA,cAAc,EAAEF,aAAa,CAACG,eAHhB;AAId5H,UAAAA,QAAQ,EAAEyH,aAAa,CAACI,SAJV;AAKdC,UAAAA,MAAM,EAAEL,aAAa,CAACK,MALR;AAMdzB,UAAAA,KAAK,EAAEoB,aAAa,CAACpB;AANP,SAAlB;AAQA,cAAM0B,OAAO,GAAkB,IAAIC,wBAAJ,EAA/B;AACAZ,QAAAA,uBAAY,CAACC,QAAb,CAAsBU,OAAtB,EAA+BL,SAA/B;AACAF,QAAAA,SAAS,CAACzB,GAAD,CAAT,GAAiBgC,OAAjB;AACH,OAbD;AAcH;;AACD,WAAOP,SAAP;AACH;AAED;;;;;;AAI8B,SAAvBS,uBAAuB,CAACC,YAAD;AAC1B,UAAMC,SAAS,GAAqB,EAApC;;AACA,QAAID,YAAJ,EAAkB;AACdtC,MAAAA,MAAM,CAACC,IAAP,CAAYqC,YAAZ,EAA0BpC,GAA1B,CAA8B,UAAUC,GAAV;AAC1B,cAAMqC,YAAY,GAAGF,YAAY,CAACnC,GAAD,CAAjC;AACA,cAAMsC,QAAQ,GAAG;AACbnC,UAAAA,aAAa,EAAEkC,YAAY,CAACjC,eADf;AAEbC,UAAAA,WAAW,EAAEgC,YAAY,CAAChC,WAFb;AAGbuB,UAAAA,cAAc,EAAES,YAAY,CAACR,eAHhB;AAIb5H,UAAAA,QAAQ,EAAEoI,YAAY,CAACP,SAJV;AAKbC,UAAAA,MAAM,EAAEM,YAAY,CAACN,MALR;AAMbzB,UAAAA,KAAK,EAAE+B,YAAY,CAAC/B,KANP;AAObiC,UAAAA,MAAM,EAAEF,YAAY,CAACE,MAPR;AAQbC,UAAAA,QAAQ,EAAEH,YAAY,CAACI,SARV;AASbC,UAAAA,SAAS,EAAEL,YAAY,CAACM,UATX;AAUbC,UAAAA,iBAAiB,EAAEP,YAAY,CAACQ,mBAVnB;AAWbC,UAAAA,SAAS,EAAET,YAAY,CAACU,UAXX;AAYbC,UAAAA,KAAK,EAAEX,YAAY,CAACY,MAZP;AAabC,UAAAA,SAAS,EAAEb,YAAY,CAACc;AAbX,SAAjB;AAeA,cAAMC,WAAW,GAAsB,IAAIC,4BAAJ,EAAvC;AACAhC,QAAAA,uBAAY,CAACC,QAAb,CAAsB8B,WAAtB,EAAmCd,QAAnC;AACAF,QAAAA,SAAS,CAACpC,GAAD,CAAT,GAAiBoD,WAAjB;AACH,OApBD;AAqBH;;AAED,WAAOhB,SAAP;AACH;AAED;;;;;;AAI+B,SAAxBkB,wBAAwB,CAACC,aAAD;AAC3B,UAAMC,SAAS,GAAsB,EAArC;;AACA,QAAID,aAAJ,EAAmB;AACf1D,MAAAA,MAAM,CAACC,IAAP,CAAYyD,aAAZ,EAA2BxD,GAA3B,CAA+B,UAAUC,GAAV;AAC3B,cAAMyD,YAAY,GAAGF,aAAa,CAACvD,GAAD,CAAlC;AACA,cAAM0D,QAAQ,GAAG;AACbvD,UAAAA,aAAa,EAAEsD,YAAY,CAACrD,eADf;AAEbC,UAAAA,WAAW,EAAEoD,YAAY,CAACpD,WAFb;AAGbuB,UAAAA,cAAc,EAAE6B,YAAY,CAAC5B,eAHhB;AAIb5H,UAAAA,QAAQ,EAAEwJ,YAAY,CAAC3B,SAJV;AAKbC,UAAAA,MAAM,EAAE0B,YAAY,CAAC1B,MALR;AAMb4B,UAAAA,QAAQ,EAAEF,YAAY,CAACG,SANV;AAObrB,UAAAA,MAAM,EAAEkB,YAAY,CAAClB,MAPR;AAQbjC,UAAAA,KAAK,EAAEmD,YAAY,CAACnD;AARP,SAAjB;AAUA,cAAMuD,YAAY,GAAuB,IAAIC,6BAAJ,EAAzC;AACAzC,QAAAA,uBAAY,CAACC,QAAb,CAAsBuC,YAAtB,EAAoCH,QAApC;AACAF,QAAAA,SAAS,CAACxD,GAAD,CAAT,GAAiB6D,YAAjB;AACH,OAfD;AAgBH;;AAED,WAAOL,SAAP;AACH;AAED;;;;;;AAI6B,SAAtBO,sBAAsB,CAACC,WAAD;AACzB,UAAMC,kBAAkB,GAAqB,EAA7C;;AACA,QAAID,WAAJ,EAAiB;AACbnE,MAAAA,MAAM,CAACC,IAAP,CAAYkE,WAAZ,EAAyBjE,GAAzB,CAA6B,UAAUC,GAAV;AACzB,cAAMkE,cAAc,GAAGF,WAAW,CAAChE,GAAD,CAAlC;AACA,cAAMmE,SAAS,GAAG;AACdlK,UAAAA,QAAQ,EAAEiK,cAAc,CAACpC,SADX;AAEdzB,UAAAA,WAAW,EAAE6D,cAAc,CAAC7D,WAFd;AAGdsD,UAAAA,QAAQ,EAAEO,cAAc,CAACN;AAHX,SAAlB;AAKA,cAAMQ,GAAG,GAAsB,IAAIC,4BAAJ,EAA/B;AACAhD,QAAAA,uBAAY,CAACC,QAAb,CAAsB8C,GAAtB,EAA2BD,SAA3B;AACAF,QAAAA,kBAAkB,CAACjE,GAAD,CAAlB,GAA0BoE,GAA1B;AACH,OAVD;AAWH;;AAED,WAAOH,kBAAP;AACH;AAED;;;;;;AAI0B,SAAnBK,mBAAmB,CAACC,SAAD;AACtB,WAAO;AACH5E,MAAAA,QAAQ,EAAE4E,SAAS,CAACC,OAAV,GACJ,KAAK9E,mBAAL,CAAyB6E,SAAS,CAACC,OAAnC,CADI,GAEJ,EAHH;AAIHhD,MAAAA,QAAQ,EAAE+C,SAAS,CAACE,OAAV,GACJ,KAAKlD,mBAAL,CAAyBgD,SAAS,CAACE,OAAnC,CADI,GAEJ,EANH;AAOHtC,MAAAA,YAAY,EAAEoC,SAAS,CAACG,WAAV,GACR,KAAKxC,uBAAL,CAA6BqC,SAAS,CAACG,WAAvC,CADQ,GAER,EATH;AAUHnB,MAAAA,aAAa,EAAEgB,SAAS,CAACI,YAAV,GACT,KAAKrB,wBAAL,CAA8BiB,SAAS,CAACI,YAAxC,CADS,GAET,EAZH;AAaHX,MAAAA,WAAW,EAAEO,SAAS,CAACK,WAAV,GACP,KAAKb,sBAAL,CAA4BQ,SAAS,CAACK,WAAtC,CADO,GAEP;AAfH,KAAP;AAiBH;;;;ACxLL;;;;AAQA,MAAaC;AACT;;;;AAIwB,SAAjBC,iBAAiB,CAACtL,IAAD;AACpB,WAAOgG,IAAI,CAACuF,SAAL,CAAevL,IAAf,CAAP;AACH;AAED;;;;;;AAIwB,SAAjBwL,iBAAiB,CAACC,QAAD;AACpB,UAAMtF,QAAQ,GAA4C,EAA1D;AACAE,IAAAA,MAAM,CAACC,IAAP,CAAYmF,QAAZ,EAAsBlF,GAAtB,CAA0B,UAAUC,GAAV;AACtB,YAAMkF,aAAa,GAAGD,QAAQ,CAACjF,GAAD,CAA9B;AACAL,MAAAA,QAAQ,CAACK,GAAD,CAAR,GAAgB;AACZI,QAAAA,eAAe,EAAE8E,aAAa,CAAC/E,aADnB;AAEZE,QAAAA,WAAW,EAAE6E,aAAa,CAAC7E,WAFf;AAGZC,QAAAA,KAAK,EAAE4E,aAAa,CAAC5E,KAHT;AAIZE,QAAAA,gBAAgB,EAAE0E,aAAa,CAAC3E,cAJpB;AAKZE,QAAAA,QAAQ,EAAEyE,aAAa,CAACzE,QALZ;AAMZE,QAAAA,cAAc,EAAEuE,aAAa,CAACxE,aANlB;AAOZE,QAAAA,IAAI,EAAEsE,aAAa,CAACtE,IAPR;AAQZE,QAAAA,WAAW,EAAEoE,aAAa,CAACrE,UARf;AASZG,QAAAA,sBAAsB,EAAEkE,aAAa,CAACnE,oBAT1B;AAUZG,QAAAA,qBAAqB,EAAEgE,aAAa,CAACjE;AAVzB,OAAhB;AAYH,KAdD;AAgBA,WAAOtB,QAAP;AACH;AAED;;;;;;AAIwB,SAAjBwF,iBAAiB,CAACC,QAAD;AACpB,UAAM5D,QAAQ,GAA4C,EAA1D;AACA3B,IAAAA,MAAM,CAACC,IAAP,CAAYsF,QAAZ,EAAsBrF,GAAtB,CAA0B,UAAUC,GAAV;AACtB,YAAMqF,SAAS,GAAGD,QAAQ,CAACpF,GAAD,CAA1B;AACAwB,MAAAA,QAAQ,CAACxB,GAAD,CAAR,GAAgB;AACZI,QAAAA,eAAe,EAAEiF,SAAS,CAAClF,aADf;AAEZE,QAAAA,WAAW,EAAEgF,SAAS,CAAChF,WAFX;AAGZwB,QAAAA,eAAe,EAAEwD,SAAS,CAACzD,cAHf;AAIZE,QAAAA,SAAS,EAAEuD,SAAS,CAACpL,QAJT;AAKZ8H,QAAAA,MAAM,EAAEsD,SAAS,CAACtD,MALN;AAMZzB,QAAAA,KAAK,EAAE+E,SAAS,CAAC/E;AANL,OAAhB;AAQH,KAVD;AAYA,WAAOkB,QAAP;AACH;AAED;;;;;;AAI4B,SAArB8D,qBAAqB,CAACC,OAAD;AACxB,UAAMpD,YAAY,GAAgD,EAAlE;AACAtC,IAAAA,MAAM,CAACC,IAAP,CAAYyF,OAAZ,EAAqBxF,GAArB,CAAyB,UAAUC,GAAV;AACrB,YAAMwF,QAAQ,GAAGD,OAAO,CAACvF,GAAD,CAAxB;AACAmC,MAAAA,YAAY,CAACnC,GAAD,CAAZ,GAAoB;AAChBI,QAAAA,eAAe,EAAEoF,QAAQ,CAACrF,aADV;AAEhBE,QAAAA,WAAW,EAAEmF,QAAQ,CAACnF,WAFN;AAGhBwB,QAAAA,eAAe,EAAE2D,QAAQ,CAAC5D,cAHV;AAIhBE,QAAAA,SAAS,EAAE0D,QAAQ,CAACvL,QAJJ;AAKhB8H,QAAAA,MAAM,EAAEyD,QAAQ,CAACzD,MALD;AAMhBzB,QAAAA,KAAK,EAAEkF,QAAQ,CAAClF,KANA;AAOhBiC,QAAAA,MAAM,EAAEiD,QAAQ,CAACjD,MAPD;AAQhBE,QAAAA,SAAS,EAAE+C,QAAQ,CAAChD,QARJ;AAShBG,QAAAA,UAAU,EAAE6C,QAAQ,CAAC9C,SATL;AAUhBG,QAAAA,mBAAmB,EAAE2C,QAAQ,CAAC5C,iBAVd;AAWhBG,QAAAA,UAAU,EAAEyC,QAAQ,CAAC1C,SAXL;AAYhBG,QAAAA,MAAM,EAAEuC,QAAQ,CAACxC,KAZD;AAahBG,QAAAA,UAAU,EAAEqC,QAAQ,CAACtC;AAbL,OAApB;AAeH,KAjBD;AAmBA,WAAOf,YAAP;AACH;AAED;;;;;;AAI6B,SAAtBsD,sBAAsB,CAACC,OAAD;AACzB,UAAMnC,aAAa,GAAiD,EAApE;AACA1D,IAAAA,MAAM,CAACC,IAAP,CAAY4F,OAAZ,EAAqB3F,GAArB,CAAyB,UAAUC,GAAV;AACrB,YAAM2F,QAAQ,GAAGD,OAAO,CAAC1F,GAAD,CAAxB;AACAuD,MAAAA,aAAa,CAACvD,GAAD,CAAb,GAAqB;AACjBI,QAAAA,eAAe,EAAEuF,QAAQ,CAACxF,aADT;AAEjBE,QAAAA,WAAW,EAAEsF,QAAQ,CAACtF,WAFL;AAGjBwB,QAAAA,eAAe,EAAE8D,QAAQ,CAAC/D,cAHT;AAIjBE,QAAAA,SAAS,EAAE6D,QAAQ,CAAC1L,QAJH;AAKjB8H,QAAAA,MAAM,EAAE4D,QAAQ,CAAC5D,MALA;AAMjB6B,QAAAA,SAAS,EAAE+B,QAAQ,CAAChC,QANH;AAOjBpB,QAAAA,MAAM,EAAEoD,QAAQ,CAACpD,MAPA;AAQjBjC,QAAAA,KAAK,EAAEqF,QAAQ,CAACrF;AARC,OAArB;AAUH,KAZD;AAcA,WAAOiD,aAAP;AACH;AAED;;;;;;AAI2B,SAApBqC,oBAAoB,CAACC,SAAD;AACvB,UAAM7B,WAAW,GAAgD,EAAjE;AACAnE,IAAAA,MAAM,CAACC,IAAP,CAAY+F,SAAZ,EAAuB9F,GAAvB,CAA2B,UAAUC,GAAV;AACvB,YAAM8F,UAAU,GAAGD,SAAS,CAAC7F,GAAD,CAA5B;AACAgE,MAAAA,WAAW,CAAChE,GAAD,CAAX,GAAmB;AACf8B,QAAAA,SAAS,EAAEgE,UAAU,CAAC7L,QADP;AAEfoG,QAAAA,WAAW,EAAEyF,UAAU,CAACzF,WAFT;AAGfuD,QAAAA,SAAS,EAAEkC,UAAU,CAACnC;AAHP,OAAnB;AAKH,KAPD;AASA,WAAOK,WAAP;AACH;AAED;;;;;;AAIwB,SAAjB+B,iBAAiB,CAACC,UAAD;AACpB,WAAO;AACHxB,MAAAA,OAAO,EAAE,KAAKQ,iBAAL,CAAuBgB,UAAU,CAACrG,QAAlC,CADN;AAEH8E,MAAAA,OAAO,EAAE,KAAKU,iBAAL,CAAuBa,UAAU,CAACxE,QAAlC,CAFN;AAGHkD,MAAAA,WAAW,EAAE,KAAKY,qBAAL,CAA2BU,UAAU,CAAC7D,YAAtC,CAHV;AAIHwC,MAAAA,YAAY,EAAE,KAAKc,sBAAL,CAA4BO,UAAU,CAACzC,aAAvC,CAJX;AAKHqB,MAAAA,WAAW,EAAE,KAAKgB,oBAAL,CAA0BI,UAAU,CAAChC,WAArC;AALV,KAAP;AAOH;;;;AChJL;;;;AAKA,AAmBA;;;;;AAIA,MAAaiC,oBAAoB5E;AAM7B7C,EAAAA,YAAY0H,QAAgBjM,UAAkBkM;AAC1C,UAAMlM,QAAN,EAAgBkM,UAAhB;AAJI,cAAA,GAAsB,EAAtB;AACA,uBAAA,GAAkC,EAAlC;AAIJ,SAAKD,MAAL,GAAcA,MAAd;AACH;AAED;;;;;;AAIAE,EAAAA,qBAAqB,CAACC,IAAD;AACjB,SAAKC,cAAL,CAAoBvI,IAApB,CAAyBsI,IAAzB;AACH;AAED;;;;;AAGAE,EAAAA,UAAU;AACN,SAAKD,cAAL,CAAoBE,OAApB,CAA4BH,IAAI,IAAIA,IAAI,CAACI,IAAL,CAAU,IAAV,CAApC;AACH;AAED;;;;;;AAIAC,EAAAA,oBAAoB,CAAC7K,KAAD;AAEhB,UAAM8K,aAAa,GAAkB;AACjChH,MAAAA,QAAQ,EAAE,EADuB;AAEjC6B,MAAAA,QAAQ,EAAE,EAFuB;AAGjCW,MAAAA,YAAY,EAAE,EAHmB;AAIjCoB,MAAAA,aAAa,EAAE,EAJkB;AAKjCS,MAAAA,WAAW,EAAE;AALoB,KAArC;;AAQA,SAAK,MAAMhE,GAAX,IAAkBnE,KAAlB,EAAyB;AACrB,UAAIA,KAAK,CAACmE,GAAD,CAAL,YAAgCoB,wBAApC,EAAmD;AAC/CuF,QAAAA,aAAa,CAAChH,QAAd,CAAuBK,GAAvB,IAA8BnE,KAAK,CAACmE,GAAD,CAAnC;AACH,OAFD,MAEO,IAAInE,KAAK,CAACmE,GAAD,CAAL,YAAsBiC,wBAA1B,EAAyC;AAC5C0E,QAAAA,aAAa,CAACnF,QAAd,CAAuBxB,GAAvB,IAA8BnE,KAAK,CAACmE,GAAD,CAAnC;AACH,OAFM,MAEA,IAAInE,KAAK,CAACmE,GAAD,CAAL,YAAsBqD,4BAA1B,EAA6C;AAChDsD,QAAAA,aAAa,CAACxE,YAAd,CAA2BnC,GAA3B,IAAkCnE,KAAK,CAACmE,GAAD,CAAvC;AACH,OAFM,MAEA,IAAInE,KAAK,CAACmE,GAAD,CAAL,YAAsB8D,6BAA1B,EAA8C;AACjD6C,QAAAA,aAAa,CAACpD,aAAd,CAA4BvD,GAA5B,IAAmCnE,KAAK,CAACmE,GAAD,CAAxC;AACH,OAFM,MAEA,IAAInE,KAAK,CAACmE,GAAD,CAAL,YAAsBqE,4BAA1B,EAA6C;AAChDsC,QAAAA,aAAa,CAAC3C,WAAd,CAA0BhE,GAA1B,IAAiCnE,KAAK,CAACmE,GAAD,CAAtC;AACH,OAFM,MAEA;AACH;AACH;AACJ;;AAED,WAAO2G,aAAP;AACH;AAED;;;;;;AAIAC,EAAAA,oBAAoB,CAACD,aAAD;AAChB;AACA,QAAI9K,KAAK,GAAG,KAAKgL,QAAL,EAAZ;AAEAhL,IAAAA,KAAK,GAAG,EACJ,GAAG8K,aAAa,CAAChH,QADb;AAEJ,SAAGgH,aAAa,CAACnF,QAFb;AAGJ,SAAGmF,aAAa,CAACxE,YAHb;AAIJ,SAAGwE,aAAa,CAACpD,aAJb;AAKJ,SAAGoD,aAAa,CAAC3C;AALb,KAAR;AAOA,WAAOnI,KAAP;AACH;AAED;;;;;AAGAiL,EAAAA,gBAAgB;AACZ,SAAKZ,MAAL,CAAYa,KAAZ,CAAkB,yBAAlB;;AAGA,UAAMJ,aAAa,GAAG,KAAKD,oBAAL,CAA0B,KAAKG,QAAL,EAA1B,CAAtB;AACA,WAAOF,aAAP;AACH;AAED;;;;;;AAIAK,EAAAA,gBAAgB,CAACL,aAAD;AACZ,SAAKT,MAAL,CAAYa,KAAZ,CAAkB,yBAAlB;;AAGA,UAAMlL,KAAK,GAAG,KAAK+K,oBAAL,CAA0BD,aAA1B,CAAd;AACA,SAAKM,QAAL,CAAcpL,KAAd;AAEA,SAAK0K,UAAL;AACH;AAED;;;;;AAGAM,EAAAA,QAAQ;AACJ,SAAKX,MAAL,CAAYa,KAAZ,CAAkB,+BAAlB;AACA,WAAO,KAAKlL,KAAZ;AACH;AAED;;;;;;AAIAoL,EAAAA,QAAQ,CAACpL,KAAD;AACJ,SAAKqK,MAAL,CAAYa,KAAZ,CAAkB,+BAAlB;AACA,SAAKlL,KAAL,GAAaA,KAAb;;AAGA,SAAK0K,UAAL;AACH;AAED;;;;;;AAIAW,EAAAA,OAAO,CAAClH,GAAD;AACH,SAAKkG,MAAL,CAAYiB,QAAZ,cAAkCnH,KAAlC;;AAGA,UAAMnE,KAAK,GAAG,KAAKgL,QAAL,EAAd;AACA,WAAOhL,KAAK,CAACmE,GAAD,CAAZ;AACH;AAED;;;;;;;AAKAoH,EAAAA,OAAO,CAACpH,GAAD,EAAcqH,KAAd;AACH,SAAKnB,MAAL,CAAYiB,QAAZ,cAAkCnH,KAAlC;;AAGA,UAAMnE,KAAK,GAAG,KAAKgL,QAAL,EAAd;AACAhL,IAAAA,KAAK,CAACmE,GAAD,CAAL,GAAaqH,KAAb;;AAGA,SAAKJ,QAAL,CAAcpL,KAAd;AACH;AAED;;;;;;AAIAyL,EAAAA,UAAU,CAACC,UAAD;AACN,UAAMpG,OAAO,GAAG,KAAK+F,OAAL,CAAaK,UAAb,CAAhB;;AACA,QAAInG,wBAAa,CAACoG,eAAd,CAA8BrG,OAA9B,CAAJ,EAA4C;AACxC,aAAOA,OAAP;AACH;;AACD,WAAO,IAAP;AACH;AAED;;;;;;AAIAsG,EAAAA,UAAU,CAACtG,OAAD;AACN,UAAMoG,UAAU,GAAGpG,OAAO,CAACuG,kBAAR,EAAnB;AACA,SAAKN,OAAL,CAAaG,UAAb,EAAyBpG,OAAzB;AACH;AAED;;;;;;AAIAwG,EAAAA,oBAAoB,CAACC,UAAD;AAChB,UAAM5F,OAAO,GAAG,KAAKkF,OAAL,CAAaU,UAAb,CAAhB;;AACA,QAAI3F,wBAAa,CAAC4F,eAAd,CAA8B7F,OAA9B,CAAJ,EAA4C;AACxC,aAAOA,OAAP;AACH;;AACD,WAAO,IAAP;AACH;AAED;;;;;;AAIA8F,EAAAA,oBAAoB,CAAC9F,OAAD;AAChB,UAAM4F,UAAU,GAAG5F,OAAO,CAAC+F,qBAAR,EAAnB;AACA,SAAKX,OAAL,CAAaQ,UAAb,EAAyB5F,OAAzB;AACH;AAED;;;;;;AAIAgG,EAAAA,wBAAwB,CAACC,cAAD;AACpB,UAAM7E,WAAW,GAAG,KAAK8D,OAAL,CAAae,cAAb,CAApB;;AACA,QAAI5E,4BAAiB,CAAC6E,mBAAlB,CAAsC9E,WAAtC,CAAJ,EAAwD;AACpD,aAAOA,WAAP;AACH;;AACD,WAAO,IAAP;AACH;AAED;;;;;;AAIA+E,EAAAA,wBAAwB,CAAC/E,WAAD;AACpB,UAAM6E,cAAc,GAAG7E,WAAW,CAAC2E,qBAAZ,EAAvB;AACA,SAAKX,OAAL,CAAaa,cAAb,EAA6B7E,WAA7B;AACH;AAED;;;;;;AAIAgF,EAAAA,yBAAyB,CAACC,eAAD;AACrB,UAAMxE,YAAY,GAAG,KAAKqD,OAAL,CAAamB,eAAb,CAArB;;AACA,QAAIvE,6BAAkB,CAACwE,oBAAnB,CAAwCzE,YAAxC,CAAJ,EAA2D;AACvD,aAAOA,YAAP;AACH;;AACD,WAAO,IAAP;AACH;AAED;;;;;;AAIA0E,EAAAA,yBAAyB,CAAC1E,YAAD;AACrB,UAAMwE,eAAe,GAAGxE,YAAY,CAACkE,qBAAb,EAAxB;AACA,SAAKX,OAAL,CAAaiB,eAAb,EAA8BxE,YAA9B;AACH;AAED;;;;;;AAIA2E,EAAAA,cAAc,CAACC,cAAD;AACV,UAAMzE,WAAW,GAAsB,KAAKkD,OAAL,CAAauB,cAAb,CAAvC;;AACA,QAAIpE,4BAAiB,CAACqE,mBAAlB,CAAsCD,cAAtC,EAAsDzE,WAAtD,CAAJ,EAAwE;AACpE,aAAOA,WAAP;AACH;;AACD,WAAO,IAAP;AACH;AAED;;;;;;AAIA2E,EAAAA,cAAc,CAAC3E,WAAD;AACV,UAAMyE,cAAc,GAAGzE,WAAW,CAAC4E,sBAAZ,EAAvB;AACA,SAAKxB,OAAL,CAAaqB,cAAb,EAA6BzE,WAA7B;AACH;AAED;;;;;;AAIA6E,EAAAA,kBAAkB,CAACC,kBAAD;AACd,UAAMC,qBAAqB,GAA0B,KAAK7B,OAAL,CAAa4B,kBAAb,CAArD;;AACA,QAAIC,qBAAqB,IAAIC,gCAAqB,CAACC,uBAAtB,CAA8CH,kBAA9C,EAAkEC,qBAAlE,CAA7B,EAAuH;AACnH,aAAOA,qBAAP;AACH;;AACD,WAAO,IAAP;AACH;AAED;;;;;;;AAKAG,EAAAA,kBAAkB,CAACC,kBAAD,EAA6BC,eAA7B;AACd,SAAKhC,OAAL,CAAa+B,kBAAb,EAAiCC,eAAjC;AACH;AAED;;;;;;AAIAC,EAAAA,oBAAoB,CAACrJ,GAAD;AAChB,UAAMsJ,uBAAuB,GAA4B,KAAKpC,OAAL,CAAalH,GAAb,CAAzD;;AACA,QAAIsJ,uBAAuB,IAAIC,kCAAuB,CAACC,yBAAxB,CAAkDxJ,GAAlD,EAAuDsJ,uBAAvD,CAA/B,EAAgH;AAC5G,aAAOA,uBAAP;AACH;;AACD,WAAO,IAAP;AACH;AAED;;;;;AAGAG,EAAAA,wBAAwB;AACpB,WAAO,KAAKC,OAAL,GAAeC,MAAf,CAAuB3J,GAAD;AACzB,aAAO,KAAK4J,mBAAL,CAAyB5J,GAAzB,CAAP;AACH,KAFM,CAAP;AAGH;AAED;;;;;;;AAKA6J,EAAAA,oBAAoB,CAAC7J,GAAD,EAAc8J,QAAd;AAChB,SAAK1C,OAAL,CAAapH,GAAb,EAAkB8J,QAAlB;AACH;AAED;;;;;;AAIAC,EAAAA,kBAAkB,CAACC,kBAAD;AACd,UAAMC,eAAe,GAAqB,KAAK/C,OAAL,CAAa8C,kBAAb,CAA1C;;AACA,QAAIC,eAAe,IAAIC,2BAAgB,CAACC,kBAAjB,CAAoCH,kBAApC,EAAwDC,eAAxD,CAAvB,EAAiG;AAC7F,aAAOA,eAAP;AACH;;AACD,WAAO,IAAP;AACH;AAED;;;;;;;AAKAG,EAAAA,kBAAkB,CAACJ,kBAAD,EAA6BC,eAA7B;AACd,SAAK7C,OAAL,CAAa4C,kBAAb,EAAiCC,eAAjC;AACH;AAED;;;;;;;AAKAI,EAAAA,UAAU,CAACrK,GAAD;AACN,SAAKkG,MAAL,CAAYiB,QAAZ,cAAkCnH,KAAlC;;AAGA,QAAIsK,MAAM,GAAY,KAAtB;AACA,UAAMzO,KAAK,GAAG,KAAKgL,QAAL,EAAd;;AAEA,QAAI,CAAC,CAAChL,KAAK,CAACmE,GAAD,CAAX,EAAkB;AACd,aAAOnE,KAAK,CAACmE,GAAD,CAAZ;AACAsK,MAAAA,MAAM,GAAG,IAAT;AACH;;;AAGD,QAAIA,MAAJ,EAAY;AACR,WAAKrD,QAAL,CAAcpL,KAAd;AACA,WAAK0K,UAAL;AACH;;AACD,WAAO+D,MAAP;AACH;AAED;;;;;;AAIAC,EAAAA,WAAW,CAACvK,GAAD;AACP,WAAO,KAAK0J,OAAL,GAAec,QAAf,CAAwBxK,GAAxB,CAAP;AACH;AAED;;;;;AAGA0J,EAAAA,OAAO;AACH,SAAKxD,MAAL,CAAYa,KAAZ,CAAkB,2BAAlB;;AAGA,UAAMlL,KAAK,GAAG,KAAKgL,QAAL,EAAd;AACA,WAAO,CAAE,GAAGhH,MAAM,CAACC,IAAP,CAAYjE,KAAZ,CAAL,CAAP;AACH;AAED;;;;;AAGW,QAAL4O,KAAK;AACP,SAAKvE,MAAL,CAAYa,KAAZ,CAAkB,wCAAlB;;AAGA,UAAM2D,SAAS,GAAG,KAAKhB,OAAL,EAAlB;;AAGAgB,IAAAA,SAAS,CAAClE,OAAV,CAAkBxG,GAAG;AACjB,WAAKqK,UAAL,CAAgBrK,GAAhB;AACH,KAFD;AAGA,SAAKuG,UAAL;AACH;AAED;;;;;;AAI4B,SAArBoE,qBAAqB,CAAC9O,KAAD;AACxB,WAAOqD,YAAY,CAACoF,mBAAb,CACHpF,YAAY,CAACC,mBAAb,CAAiCtD,KAAjC,CADG,CAAP;AAGH;AAED;;;;;;AAIwB,SAAjB+O,iBAAiB,CAACjE,aAAD;AACpB,WAAO9B,UAAU,CAACkB,iBAAX,CAA6BY,aAA7B,CAAP;AACH;AAED;;;;;AAGAkE,EAAAA,wBAAwB,CAACC,eAAD,EAA0BC,UAA1B;AACpB,UAAMC,eAAe,GAAGD,UAAU,CAAChD,qBAAX,EAAxB;;AAEA,QAAI+C,eAAe,KAAKE,eAAxB,EAAyC;AACrC,YAAMC,SAAS,GAAG,KAAK/D,OAAL,CAAa4D,eAAb,CAAlB;;AACA,UAAIG,SAAJ,EAAe;AACX,aAAKZ,UAAL,CAAgBS,eAAhB;AACA,aAAK1D,OAAL,CAAa4D,eAAb,EAA8BC,SAA9B;AACA,aAAK/E,MAAL,CAAYgF,OAAZ,wBAA2CH,UAAU,CAACnJ,0BAAtD;AACA,eAAOoJ,eAAP;AACH,OALD,MAKO;AACH,aAAK9E,MAAL,CAAYiF,KAAZ,oCAAqDJ,UAAU,CAACnJ,qFAAhE;AACH;AACJ;;AAED,WAAOkJ,eAAP;AACH;;;;ACpcL;;;;AAMA,AAMA,MAAMM,sBAAsB,GAAc;AACtC5G,EAAAA,OAAO,EAAE,EAD6B;AAEtCC,EAAAA,OAAO,EAAE,EAF6B;AAGtCC,EAAAA,WAAW,EAAE,EAHyB;AAItCC,EAAAA,YAAY,EAAE,EAJwB;AAKtCC,EAAAA,WAAW,EAAE;AALyB,CAA1C;AAQA;;;;;AAIA,MAAayG;AAQT7M,EAAAA,YAAY8M,SAAsBpF,QAAgBqF;AAC9C,SAAKC,eAAL,GAAuB,KAAvB;AACA,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKA,OAAL,CAAalF,qBAAb,CAAmC,KAAKqF,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAnC;;AACA,QAAIH,WAAJ,EAAiB;AACb,WAAKI,WAAL,GAAmBJ,WAAnB;AACH;;AACD,SAAKrF,MAAL,GAAcA,MAAd;AACH;AAED;;;;;AAGA0F,EAAAA,UAAU;AACN,WAAO,KAAKJ,eAAZ;AACH;AAED;;;;;AAGAK,EAAAA,SAAS;AACL,SAAK3F,MAAL,CAAYa,KAAZ,CAAkB,6BAAlB;AACA,QAAI+E,UAAU,GAAGjH,UAAU,CAACkB,iBAAX,CACb,KAAKuF,OAAL,CAAaxE,gBAAb,EADa,CAAjB;;AAKA,QAAI,CAACxH,sBAAW,CAACC,OAAZ,CAAoB,KAAKwM,aAAzB,CAAL,EAA8C;AAC1C,WAAK7F,MAAL,CAAYa,KAAZ,CAAkB,kCAAlB;AACA+E,MAAAA,UAAU,GAAG,KAAKE,UAAL,CACTxM,IAAI,CAACC,KAAL,CAAW,KAAKsM,aAAhB,CADS,EAETD,UAFS,CAAb;AAIH,KAND,MAMO;AACH,WAAK5F,MAAL,CAAYa,KAAZ,CAAkB,4BAAlB;AACH;;AACD,SAAKyE,eAAL,GAAuB,KAAvB;AAEA,WAAOhM,IAAI,CAACuF,SAAL,CAAe+G,UAAf,CAAP;AACH;AAED;;;;;;AAIAG,EAAAA,WAAW,CAACpQ,KAAD;AACP,SAAKqK,MAAL,CAAYa,KAAZ,CAAkB,uCAAlB;AACA,SAAKgF,aAAL,GAAqBlQ,KAArB;;AAEA,QAAI,CAACyD,sBAAW,CAACC,OAAZ,CAAoB,KAAKwM,aAAzB,CAAL,EAA8C;AAC1C,WAAK7F,MAAL,CAAYa,KAAZ,CAAkB,kCAAlB;AACA,YAAM1H,iBAAiB,GAAGH,YAAY,CAACoF,mBAAb,CACtB,KAAK4H,eAAL,CAAqB1M,IAAI,CAACC,KAAL,CAAW,KAAKsM,aAAhB,CAArB,CADsB,CAA1B;AAGA,WAAKT,OAAL,CAAatE,gBAAb,CAA8B3H,iBAA9B;AACH,KAND,MAMO;AACH,WAAK6G,MAAL,CAAYa,KAAZ,CAAkB,kCAAlB;AACH;AACJ;AAED;;;;;AAGAoF,EAAAA,UAAU;AACN,WAAO,KAAKb,OAAL,CAAazE,QAAb,EAAP;AACH;AAED;;;;;AAGoB,QAAduF,cAAc;AAEhB,SAAKlG,MAAL,CAAYa,KAAZ,CAAkB,uBAAlB;AACA,QAAIsF,YAAJ;;AACA,QAAI;AACA,UAAI,KAAKV,WAAT,EAAsB;AAClBU,QAAAA,YAAY,GAAG,IAAIC,4BAAJ,CAAsB,IAAtB,EAA4B,KAA5B,CAAf;AACA,cAAM,KAAKX,WAAL,CAAiBY,iBAAjB,CAAmCF,YAAnC,CAAN;AACH;;AACD,aAAO,KAAKf,OAAL,CAAac,cAAb,EAAP;AACH,KAND,SAMU;AACN,UAAI,KAAKT,WAAL,IAAoBU,YAAxB,EAAsC;AAClC,cAAM,KAAKV,WAAL,CAAiBa,gBAAjB,CAAkCH,YAAlC,CAAN;AACH;AACJ;AACJ;AAED;;;;;;;;AAMwB,QAAlBI,kBAAkB,CAACtM,aAAD;AACpB,UAAMuM,WAAW,GAAG,MAAM,KAAKN,cAAL,EAA1B;;AACA,QAAI,CAAC9M,sBAAW,CAACC,OAAZ,CAAoBY,aAApB,CAAD,IAAuCuM,WAAvC,IAAsDA,WAAW,CAACxP,MAAtE,EAA8E;AAC1E,aAAOwP,WAAW,CAAC/C,MAAZ,CAAmBgD,UAAU,IAAIA,UAAU,CAACxM,aAAX,KAA6BA,aAA9D,EAA6E,CAA7E,KAAmF,IAA1F;AACH,KAFD,MAEO;AACH,aAAO,IAAP;AACH;AACJ;AAED;;;;;;;;AAMyB,QAAnByM,mBAAmB,CAACrM,cAAD;AACrB,UAAMmM,WAAW,GAAG,MAAM,KAAKN,cAAL,EAA1B;;AACA,QAAI,CAAC9M,sBAAW,CAACC,OAAZ,CAAoBgB,cAApB,CAAD,IAAwCmM,WAAxC,IAAuDA,WAAW,CAACxP,MAAvE,EAA+E;AAC3E,aAAOwP,WAAW,CAAC/C,MAAZ,CAAmBgD,UAAU,IAAIA,UAAU,CAACpM,cAAX,KAA8BA,cAA/D,EAA+E,CAA/E,KAAqF,IAA5F;AACH,KAFD,MAEO;AACH,aAAO,IAAP;AACH;AACJ;AAED;;;;;;AAImB,QAAbsM,aAAa,CAAC1L,OAAD;AACf,SAAK+E,MAAL,CAAYa,KAAZ,CAAkB,sBAAlB;AACA,QAAIsF,YAAJ;;AACA,QAAI;AACA,UAAI,KAAKV,WAAT,EAAsB;AAClBU,QAAAA,YAAY,GAAG,IAAIC,4BAAJ,CAAsB,IAAtB,EAA4B,IAA5B,CAAf;AACA,cAAM,KAAKX,WAAL,CAAiBY,iBAAjB,CAAmCF,YAAnC,CAAN;AACH;;AACD,YAAM,KAAKf,OAAL,CAAauB,aAAb,CAA2BzL,wBAAa,CAAC0L,uBAAd,CAAsC3L,OAAtC,CAA3B,CAAN;AACH,KAND,SAMU;AACN,UAAI,KAAKwK,WAAL,IAAoBU,YAAxB,EAAsC;AAClC,cAAM,KAAKV,WAAL,CAAiBa,gBAAjB,CAAkCH,YAAlC,CAAN;AACH;AACJ;AACJ;AAED;;;;;AAGQZ,EAAAA,iBAAiB;AACrB,SAAKD,eAAL,GAAuB,IAAvB;AACH;AAED;;;;;;;AAKQQ,EAAAA,UAAU,CAACe,QAAD,EAAsBC,YAAtB;AACd,SAAK9G,MAAL,CAAYa,KAAZ,CAAkB,6CAAlB;AACA,UAAMkG,iBAAiB,GAAG,KAAKC,aAAL,CAAmBH,QAAnB,EAA6BC,YAA7B,CAA1B;AACA,WAAO,KAAKG,YAAL,CAAkBF,iBAAlB,EAAqCD,YAArC,CAAP;AACH;AAED;;;;;;;AAKQG,EAAAA,YAAY,CAACJ,QAAD,EAAmBK,QAAnB;AAChBvN,IAAAA,MAAM,CAACC,IAAP,CAAYsN,QAAZ,EAAsB5G,OAAtB,CAA+B6G,MAAD;AAC1B,YAAMC,QAAQ,GAAGF,QAAQ,CAACC,MAAD,CAAzB;;AAGA,UAAI,CAACN,QAAQ,CAACQ,cAAT,CAAwBF,MAAxB,CAAL,EAAsC;AAClC,YAAIC,QAAQ,KAAK,IAAjB,EAAuB;AACnBP,UAAAA,QAAQ,CAACM,MAAD,CAAR,GAAmBC,QAAnB;AACH;AACJ,OAJD,MAIO;AACH;AACA,cAAME,eAAe,GAAGF,QAAQ,KAAK,IAArC;AACA,cAAMG,gBAAgB,GAAG,OAAOH,QAAP,KAAoB,QAA7C;AACA,cAAMI,kBAAkB,GAAG,CAACC,KAAK,CAACC,OAAN,CAAcN,QAAd,CAA5B;AACA,cAAMO,0BAA0B,GAAG,OAAOd,QAAQ,CAACM,MAAD,CAAf,KAA4B,WAA5B,IAA2CN,QAAQ,CAACM,MAAD,CAAR,KAAqB,IAAnG;;AAEA,YAAIG,eAAe,IAAIC,gBAAnB,IAAuCC,kBAAvC,IAA6DG,0BAAjE,EAA6F;AACzF,eAAKV,YAAL,CAAkBJ,QAAQ,CAACM,MAAD,CAA1B,EAAoCC,QAApC;AACH,SAFD,MAEO;AACHP,UAAAA,QAAQ,CAACM,MAAD,CAAR,GAAmBC,QAAnB;AACH;AACJ;AACJ,KArBD;AAuBA,WAAOP,QAAP;AACH;AAED;;;;;;;;AAMQG,EAAAA,aAAa,CAACH,QAAD,EAAsBK,QAAtB;AACjB,SAAKlH,MAAL,CAAYa,KAAZ,CAAkB,iCAAlB;AACA,UAAMpH,QAAQ,GAAGoN,QAAQ,CAACvI,OAAT,GAAmB,KAAKsJ,iBAAL,CAAgDf,QAAQ,CAACvI,OAAzD,EAAkE4I,QAAQ,CAAC5I,OAA3E,CAAnB,GAAyGuI,QAAQ,CAACvI,OAAnI;AACA,UAAMrC,YAAY,GAAG4K,QAAQ,CAACrI,WAAT,GAAuB,KAAKoJ,iBAAL,CAAoDf,QAAQ,CAACrI,WAA7D,EAA0E0I,QAAQ,CAAC1I,WAAnF,CAAvB,GAAyHqI,QAAQ,CAACrI,WAAvJ;AACA,UAAMnB,aAAa,GAAGwJ,QAAQ,CAACpI,YAAT,GAAwB,KAAKmJ,iBAAL,CAAqDf,QAAQ,CAACpI,YAA9D,EAA4EyI,QAAQ,CAACzI,YAArF,CAAxB,GAA6HoI,QAAQ,CAACpI,YAA5J;AACA,UAAMnD,QAAQ,GAAGuL,QAAQ,CAACtI,OAAT,GAAmB,KAAKqJ,iBAAL,CAAgDf,QAAQ,CAACtI,OAAzD,EAAkE2I,QAAQ,CAAC3I,OAA3E,CAAnB,GAAyGsI,QAAQ,CAACtI,OAAnI;AACA,UAAMT,WAAW,GAAG+I,QAAQ,CAACnI,WAAT,GAAuB,KAAKkJ,iBAAL,CAAoDf,QAAQ,CAACnI,WAA7D,EAA0EwI,QAAQ,CAACxI,WAAnF,CAAvB,GAAyHmI,QAAQ,CAACnI,WAAtJ;AAEA,WAAO,EACH,GAAGmI,QADA;AAEHvI,MAAAA,OAAO,EAAE7E,QAFN;AAGH+E,MAAAA,WAAW,EAAEvC,YAHV;AAIHwC,MAAAA,YAAY,EAAEpB,aAJX;AAKHkB,MAAAA,OAAO,EAAEjD,QALN;AAMHoD,MAAAA,WAAW,EAAEZ;AANV,KAAP;AAQH;AAED;;;;;;;AAKQ8J,EAAAA,iBAAiB,CAAIf,QAAJ,EAAiCK,QAAjC;AACrB,UAAMtB,UAAU,GAAG,EAAE,GAAGiB;AAAL,KAAnB;AACAlN,IAAAA,MAAM,CAACC,IAAP,CAAYiN,QAAZ,EAAsBvG,OAAtB,CAA+BuH,MAAD;AAC1B,UAAI,CAACX,QAAD,IAAa,CAAEA,QAAQ,CAACG,cAAT,CAAwBQ,MAAxB,CAAnB,EAAqD;AACjD,eAAOjC,UAAU,CAACiC,MAAD,CAAjB;AACH;AACJ,KAJD;AAKA,WAAOjC,UAAP;AACH;AAED;;;;;;AAIQI,EAAAA,eAAe,CAAC8B,aAAD;AACnB,SAAK9H,MAAL,CAAYa,KAAZ,CAAkB,+CAAlB;AACA,WAAO;AACHvC,MAAAA,OAAO,EAAE,EACL,GAAG4G,sBAAsB,CAAC5G,OADrB;AAEL,WAAGwJ,aAAa,CAACxJ;AAFZ,OADN;AAKHC,MAAAA,OAAO,EAAE,EACL,GAAG2G,sBAAsB,CAAC3G,OADrB;AAEL,WAAGuJ,aAAa,CAACvJ;AAFZ,OALN;AASHC,MAAAA,WAAW,EAAE,EACT,GAAG0G,sBAAsB,CAAC1G,WADjB;AAET,WAAGsJ,aAAa,CAACtJ;AAFR,OATV;AAaHC,MAAAA,YAAY,EAAE,EACV,GAAGyG,sBAAsB,CAACzG,YADhB;AAEV,WAAGqJ,aAAa,CAACrJ;AAFP,OAbX;AAiBHC,MAAAA,WAAW,EAAE,EACT,GAAGwG,sBAAsB,CAACxG,WADjB;AAET,WAAGoJ,aAAa,CAACpJ;AAFR;AAjBV,KAAP;AAsBH;;;;AC9RL;AACA,AAAO,MAAMhE,IAAI,GAAG,kBAAb;AACP,MAAaqN,OAAO,GAAG,OAAhB;;ACFP;;;;AAKA,AAsCA;;;;;AAIA,MAAsBC;AA0BlB;;;AAGA1P,EAAAA,YAAsB2P;AAClB,SAAKC,MAAL,GAAczS,qBAAqB,CAACwS,aAAD,CAAnC;AACA,SAAKE,cAAL,GAAsB,IAAI9P,cAAJ,EAAtB;AACA,SAAK2H,MAAL,GAAc,IAAIoI,iBAAJ,CAAW,KAAKF,MAAL,CAAYtS,MAAZ,CAAmBL,aAA9B,EAA6CmF,IAA7C,EAAmDqN,OAAnD,CAAd;AACA,SAAK3C,OAAL,GAAe,IAAIrF,WAAJ,CAAgB,KAAKC,MAArB,EAA6B,KAAKkI,MAAL,CAAYxS,IAAZ,CAAiB3B,QAA9C,EAAwD,KAAKoU,cAA7D,CAAf;AACA,SAAKE,UAAL,GAAkB,IAAIlD,UAAJ,CACd,KAAKC,OADS,EAEd,KAAKpF,MAFS,EAGd,KAAKkI,MAAL,CAAYvS,KAAZ,CAAkB0P,WAHJ,CAAlB;AAKH;AAED;;;;;;;;;;;AASoB,QAAdiD,cAAc,CAACxV,OAAD;AAChB,SAAKkN,MAAL,CAAYuI,IAAZ,CAAiB,uBAAjB,EAA0CzV,OAAO,CAAC0V,aAAlD;AACA,UAAMC,YAAY,GAAkC,EAChD,GAAG3V,OAD6C;AAEhD,SAAG,KAAK4V,qBAAL,CAA2B5V,OAA3B,CAF6C;AAGhD6V,MAAAA,YAAY,EAAE7V,OAAO,CAAC6V,YAAR,IAAwBC,uBAAY,CAACC,KAHH;AAIhDC,MAAAA,oBAAoB,EAAEC,+BAAoB,CAACC;AAJK,KAApD;AAOA,UAAMC,gBAAgB,GAAG,MAAM,KAAKC,6BAAL,CAC3BT,YAAY,CAACzU,SADc,EAE3ByU,YAAY,CAACD,aAFc,CAA/B;AAIA,UAAMW,uBAAuB,GAAG,IAAIC,kCAAJ,CAC5BH,gBAD4B,CAAhC;AAGA,SAAKjJ,MAAL,CAAYgF,OAAZ,CAAoB,0BAApB,EAAgDyD,YAAY,CAACD,aAA7D;AACA,WAAOW,uBAAuB,CAACb,cAAxB,CAAuCG,YAAvC,CAAP;AACH;AAED;;;;;;;;;;AAQwB,QAAlBY,kBAAkB,CAACvW,OAAD;AACpB,SAAKkN,MAAL,CAAYuI,IAAZ,CAAiB,2BAAjB,EAA8CzV,OAAO,CAAC0V,aAAtD;AACA,UAAMC,YAAY,GAAmC,EACjD,GAAG3V,OAD8C;AAEjD,SAAG,KAAK4V,qBAAL,CAA2B5V,OAA3B,CAF8C;AAGjDgW,MAAAA,oBAAoB,EAAEC,+BAAoB,CAACC;AAHM,KAArD;AAKA,UAAMM,sBAAsB,GAAG,KAAKC,gCAAL,CAAsCzX,KAAK,CAACuX,kBAA5C,EAAgEZ,YAAY,CAACD,aAA7E,CAA/B;;AACA,QAAI;AACA,YAAMS,gBAAgB,GAAG,MAAM,KAAKC,6BAAL,CAC3BT,YAAY,CAACzU,SADc,EAE3ByU,YAAY,CAACD,aAFc,EAG3Bc,sBAH2B,CAA/B;AAKA,YAAMH,uBAAuB,GAAG,IAAIC,kCAAJ,CAC5BH,gBAD4B,CAAhC;AAGA,WAAKjJ,MAAL,CAAYgF,OAAZ,CAAoB,0BAApB,EAAgDyD,YAAY,CAACD,aAA7D;AACA,aAAOW,uBAAuB,CAACK,YAAxB,CAAqCf,YAArC,CAAP;AACH,KAXD,CAWE,OAAOgB,CAAP,EAAU;AACR,UAAIA,CAAC,YAAYC,oBAAjB,EAA4B;AACxBD,QAAAA,CAAC,CAACE,gBAAF,CAAmBlB,YAAY,CAACD,aAAhC;AACH;;AACDc,MAAAA,sBAAsB,CAACM,kBAAvB,CAA0CH,CAA1C;AACA,YAAMA,CAAN;AACH;AACJ;AAED;;;;;;;;;AAOgC,QAA1BI,0BAA0B,CAAC/W,OAAD;AAC5B,SAAKkN,MAAL,CAAYuI,IAAZ,CAAiB,mCAAjB,EAAsDzV,OAAO,CAAC0V,aAA9D;AACA,UAAMC,YAAY,GAA8B,EAC5C,GAAG3V,OADyC;AAE5C,SAAG,KAAK4V,qBAAL,CAA2B5V,OAA3B,CAFyC;AAG5CgW,MAAAA,oBAAoB,EAAEC,+BAAoB,CAACC;AAHC,KAAhD;AAMA,UAAMM,sBAAsB,GAAG,KAAKC,gCAAL,CAAsCzX,KAAK,CAAC+X,0BAA5C,EAAwEpB,YAAY,CAACD,aAArF,CAA/B;;AACA,QAAI;AACA,YAAMsB,wBAAwB,GAAG,MAAM,KAAKZ,6BAAL,CACnCT,YAAY,CAACzU,SADsB,EAEnCyU,YAAY,CAACD,aAFsB,EAGnCc,sBAHmC,CAAvC;AAKA,YAAMS,kBAAkB,GAAG,IAAIC,6BAAJ,CACvBF,wBADuB,CAA3B;AAGA,WAAK9J,MAAL,CAAYgF,OAAZ,CAAoB,8BAApB,EAAoDyD,YAAY,CAACD,aAAjE;AACA,aAAOuB,kBAAkB,CAACP,YAAnB,CAAgCf,YAAhC,CAAP;AACH,KAXD,CAWE,OAAOgB,CAAP,EAAU;AACR,UAAIA,CAAC,YAAYC,oBAAjB,EAA4B;AACxBD,QAAAA,CAAC,CAACE,gBAAF,CAAmBlB,YAAY,CAACD,aAAhC;AACH;;AACDc,MAAAA,sBAAsB,CAACM,kBAAvB,CAA0CH,CAA1C;AACA,YAAMA,CAAN;AACH;AACJ;AAED;;;;;;;;;;AAQwB,QAAlBQ,kBAAkB,CAACnX,OAAD;AACpB,UAAM2V,YAAY,GAA4B,EAC1C,GAAG3V,OADuC;AAE1C,SAAG,KAAK4V,qBAAL,CAA2B5V,OAA3B,CAFuC;AAG1CoX,MAAAA,YAAY,EAAEpX,OAAO,CAACoX,YAAR,IAAwB;AAHI,KAA9C;AAMA,UAAMZ,sBAAsB,GAAG,KAAKC,gCAAL,CAAsCzX,KAAK,CAACmY,kBAA5C,EAAgExB,YAAY,CAACD,aAA7E,EAA4FC,YAAY,CAACyB,YAAzG,CAA/B;;AACA,QAAI;AACA,YAAMC,sBAAsB,GAAG,MAAM,KAAKjB,6BAAL,CACjCT,YAAY,CAACzU,SADoB,EAEjCyU,YAAY,CAACD,aAFoB,EAGjCc,sBAHiC,CAArC;AAKA,YAAMc,gBAAgB,GAAG,IAAIC,2BAAJ,CACrBF,sBADqB,CAAzB;AAGA,WAAKnK,MAAL,CAAYgF,OAAZ,CAAoB,4BAApB,EAAkDyD,YAAY,CAACD,aAA/D;AACA,aAAO4B,gBAAgB,CAACZ,YAAjB,CAA8Bf,YAA9B,CAAP;AACH,KAXD,CAWE,OAAOgB,CAAP,EAAU;AACR,UAAIA,CAAC,YAAYC,oBAAjB,EAA4B;AACxBD,QAAAA,CAAC,CAACE,gBAAF,CAAmBlB,YAAY,CAACD,aAAhC;AACH;;AACDc,MAAAA,sBAAsB,CAACM,kBAAvB,CAA0CH,CAA1C;AACA,YAAMA,CAAN;AACH;AACJ;AAED;;;;;;;;;;;;AAUoC,QAA9Ba,8BAA8B,CAACxX,OAAD;AAChC,SAAKkN,MAAL,CAAYuI,IAAZ,CAAiB,uCAAjB,EAA0DzV,OAAO,CAAC0V,aAAlE;AACA,UAAMC,YAAY,GAAkC,EAChD,GAAG3V,OAD6C;AAEhD,SAAG,KAAK4V,qBAAL,CAA2B5V,OAA3B;AAF6C,KAApD;AAIA,UAAMwW,sBAAsB,GAAG,KAAKC,gCAAL,CAAsCzX,KAAK,CAACwY,8BAA5C,EAA4E7B,YAAY,CAACD,aAAzF,CAA/B;;AACA,QAAI;AACA,YAAM+B,4BAA4B,GAAG,MAAM,KAAKrB,6BAAL,CACvCT,YAAY,CAACzU,SAD0B,EAEvCyU,YAAY,CAACD,aAF0B,EAGvCc,sBAHuC,CAA3C;AAKA,YAAMkB,sBAAsB,GAAG,IAAIC,iCAAJ,CAA2BF,4BAA3B,CAA/B;AACA,WAAKvK,MAAL,CAAYgF,OAAZ,CAAoB,kCAApB,EAAwDyD,YAAY,CAACD,aAArE;AACA,aAAOgC,sBAAsB,CAAChB,YAAvB,CAAoCf,YAApC,CAAP;AACH,KATD,CASE,OAAOgB,CAAP,EAAU;AACR,UAAIA,CAAC,YAAYC,oBAAjB,EAA4B;AACxBD,QAAAA,CAAC,CAACE,gBAAF,CAAmBlB,YAAY,CAACD,aAAhC;AACH;;AACDc,MAAAA,sBAAsB,CAACM,kBAAvB,CAA0CH,CAA1C;AACA,YAAMA,CAAN;AACH;AACJ;AAED;;;;;AAGAiB,EAAAA,aAAa;AACT,SAAK1K,MAAL,CAAYuI,IAAZ,CAAiB,sBAAjB;AACA,WAAO,KAAKF,UAAZ;AACH;AAED;;;;;AAGAsC,EAAAA,SAAS;AACL,WAAO,KAAK3K,MAAZ;AACH;AAED;;;;;;AAIA4K,EAAAA,SAAS,CAAC5K,MAAD;AACL,SAAKA,MAAL,GAAcA,MAAd;AACH;AAED;;;;;;;AAK6C,QAA7BkJ,6BAA6B,CAAClV,SAAD,EAAoB6W,oBAApB,EAAmDvB,sBAAnD,EAAoGwB,wBAApG;AACzC,SAAK9K,MAAL,CAAYgF,OAAZ,CAAoB,sCAApB,EAA4D6F,oBAA5D;;AAEA,SAAK7K,MAAL,CAAYgF,OAAZ,4DAA+EhR,WAA/E,EAA4F6W,oBAA5F;AAEA,UAAME,mBAAmB,GAAG,MAAM,KAAKC,eAAL,CAAqBhX,SAArB,EAAgC8W,wBAAhC,EAA0DD,oBAA1D,CAAlC;AAEAvB,IAAAA,sBAAsB,QAAtB,YAAAA,sBAAsB,CAAE2B,6BAAxB,CAAsDF,mBAAmB,CAACG,uBAA1E;AAEA,WAAO;AACHC,MAAAA,WAAW,EAAE;AACTpX,QAAAA,QAAQ,EAAE,KAAKmU,MAAL,CAAYxS,IAAZ,CAAiB3B,QADlB;AAETC,QAAAA,SAAS,EAAE+W,mBAFF;AAGTpW,QAAAA,kBAAkB,EAAE,KAAKuT,MAAL,CAAYxS,IAAZ,CAAiBf;AAH5B,OADV;AAMHY,MAAAA,aAAa,EAAE;AACXJ,QAAAA,QAAQ,EAAE,KAAK+S,MAAL,CAAYtS,MAAZ,CAAmBL,aAAnB,CAAiCJ,QADhC;AAEXF,QAAAA,cAAc,EAAE,KAAKiT,MAAL,CAAYtS,MAAZ,CAAmBL,aAAnB,CACXN,cAHM;AAIXC,QAAAA,iBAAiB,EAAE,KAAKgT,MAAL,CAAYtS,MAAZ,CAAmBL,aAAnB,CACdL,iBALM;AAMXsT,QAAAA,aAAa,EAAEqC;AANJ,OANZ;AAcHO,MAAAA,eAAe,EAAE,KAAKjD,cAdnB;AAeHkD,MAAAA,gBAAgB,EAAE,KAAKnD,MAAL,CAAYtS,MAAZ,CAAmBJ,aAflC;AAgBH8V,MAAAA,gBAAgB,EAAE,KAAKlG,OAhBpB;AAiBHkE,MAAAA,sBAAsB,EAAEA,sBAjBrB;AAkBHiC,MAAAA,iBAAiB,EAAE;AACfrX,QAAAA,YAAY,EAAE,KAAKA,YADJ;AAEfC,QAAAA,eAAe,EAAE,KAAKA,eAAL,GAAuB,KAAKqX,kBAAL,CAAwBT,mBAAxB,CAAvB,GAAsEU;AAFxE,OAlBhB;AAsBHC,MAAAA,WAAW,EAAE;AACTC,QAAAA,GAAG,EAAEC,SAAa,CAACha,QADV;AAETmW,QAAAA,OAAO,EAAEA,OAFA;AAGT8D,QAAAA,GAAG,EAAEC,OAAO,CAACC,IAAR,IAAgB,EAHZ;AAITC,QAAAA,EAAE,EAAEF,OAAO,CAACG,QAAR,IAAoB;AAJf,OAtBV;AA4BHC,MAAAA,iBAAiB,EAAE,KAAKhE,MAAL,CAAYvS,KAAZ,CAAkB0P,WA5BlC;AA6BH8G,MAAAA,iBAAiB,EAAE,KAAK9D;AA7BrB,KAAP;AA+BH;;AAEOmD,EAAAA,kBAAkB,CAACxX,SAAD;AACtB,WAAO;AACHoY,MAAAA,SAAS,EAAE,KAAKjY,eAAL,CAAqBkY,MAArB,CAA4B,KAAKlE,cAAjC,EAAiD,KAAKD,MAAL,CAAYxS,IAAZ,CAAiB3B,QAAlE,EAA4EC,SAAS,CAACsY,aAAtF,CADR;AAEHC,MAAAA,aAAa,EAAEX,SAAa,CAAC/Z;AAF1B,KAAP;AAIH;AAED;;;;;;AAIU6W,EAAAA,qBAAqB,CAAC8D,WAAD;AAC3B,SAAKxM,MAAL,CAAYgF,OAAZ,CAAoB,gCAApB,EAAsDwH,WAAW,CAAChE,aAAlE;;AAEA,QAAIgE,WAAW,CAAC1D,oBAAZ,IAAoC0D,WAAW,CAAC1D,oBAAZ,KAAqCC,+BAAoB,CAAC0D,GAAlG,EAAuG;AACnG,WAAKzM,MAAL,CAAYgF,OAAZ,CAAoB,yGAApB,EAA+HwH,WAAW,CAAChE,aAA3I;AACH;;AAEDgE,IAAAA,WAAW,CAAC1D,oBAAZ,GAAmCC,+BAAoB,CAACC,MAAxD;AAEA,WAAO,EACH,GAAGwD,WADA;AAEHE,MAAAA,MAAM,EAAE,CAAC,IAAKF,WAAW,IAAIA,WAAW,CAACE,MAA5B,IAAuC,EAA3C,CAAD,EAAiD,GAAGC,8BAApD,CAFL;AAGHnE,MAAAA,aAAa,EAAEgE,WAAW,IAAIA,WAAW,CAAChE,aAA3B,IAA4C,KAAKL,cAAL,CAAoB3P,aAApB,EAHxD;AAIHxE,MAAAA,SAAS,EAAEwY,WAAW,CAACxY,SAAZ,IAAyB,KAAKkU,MAAL,CAAYxS,IAAZ,CAAiB1B;AAJlD,KAAP;AAMH;AAED;;;;;;;;AAMUuV,EAAAA,gCAAgC,CAACqD,KAAD,EAAgBpE,aAAhB,EAAuC0B,YAAvC;AACtC,UAAM2C,gBAAgB,GAA2B;AAC7C9Y,MAAAA,QAAQ,EAAE,KAAKmU,MAAL,CAAYxS,IAAZ,CAAiB3B,QADkB;AAE7CyU,MAAAA,aAAa,EAAEA,aAF8B;AAG7CoE,MAAAA,KAAK,EAAEA,KAHsC;AAI7C1C,MAAAA,YAAY,EAAEA,YAAY,IAAI;AAJe,KAAjD;AAOA,WAAO,IAAI4C,iCAAJ,CAA2BD,gBAA3B,EAA6C,KAAKzH,OAAlD,CAAP;AACH;AAED;;;;;;;AAK6B,QAAf4F,eAAe,CAAC+B,eAAD,EAA0BjC,wBAA1B,EAA+ED,oBAA/E;AACzB,SAAK7K,MAAL,CAAYgF,OAAZ,CAAoB,wBAApB,EAA8C6F,oBAA9C;AACA,UAAMmC,gBAAgB,GAAqB;AACvCpY,MAAAA,YAAY,EAAE,KAAKsT,MAAL,CAAYxS,IAAZ,CAAiBd,YADQ;AAEvCJ,MAAAA,gBAAgB,EAAE,KAAK0T,MAAL,CAAYxS,IAAZ,CAAiBlB,gBAFI;AAGvCC,MAAAA,sBAAsB,EAAE,KAAKyT,MAAL,CAAYxS,IAAZ,CAAiBjB,sBAHF;AAIvCC,MAAAA,iBAAiB,EAAE,KAAKwT,MAAL,CAAYxS,IAAZ,CAAiBhB,iBAJG;AAKvCoW,MAAAA;AALuC,KAA3C;AAOA,WAAO,MAAMmC,2BAAgB,CAACC,wBAAjB,CAA0CH,eAA1C,EAA2D,KAAK7E,MAAL,CAAYtS,MAAZ,CAAmBJ,aAA9E,EAA6F,KAAK4P,OAAlG,EAA2G4H,gBAA3G,CAAb;AACH;;;;ACtYL;;;;AAKA,AAYA;;;;;;AAKA,MAAaG,gCAAgCnF;AACzC;;;;;;;;;;;;;;;;;AAiBA1P,EAAAA,YAAY2P;AACR,UAAMA,aAAN;AACH;AAED;;;;;;;;;;;AASqC,QAAxBmF,wBAAwB,CAACta,OAAD;AACjC,SAAKkN,MAAL,CAAYuI,IAAZ,CAAiB,iCAAjB,EAAoDzV,OAAO,CAAC0V,aAA5D;AACA,UAAMC,YAAY,GAA4B9O,MAAM,CAAC0T,MAAP,CAAcva,OAAd,EAAuB,KAAK4V,qBAAL,CAA2B5V,OAA3B,CAAvB,CAA9C;AACA,UAAMwW,sBAAsB,GAAG,KAAKC,gCAAL,CAAsCzX,KAAK,CAACsb,wBAA5C,EAAsE3E,YAAY,CAACD,aAAnF,CAA/B;;AACA,QAAI;AACA,YAAM8E,gBAAgB,GAAG,MAAM,KAAKpE,6BAAL,CAC3BT,YAAY,CAACzU,SADc,EAE3ByU,YAAY,CAACD,aAFc,EAG3Bc,sBAH2B,CAA/B;AAKA,YAAMiE,gBAAgB,GAAG,IAAIC,2BAAJ,CAAqBF,gBAArB,CAAzB;AACA,WAAKtN,MAAL,CAAYgF,OAAZ,CAAoB,4BAApB,EAAkDyD,YAAY,CAACD,aAA/D;AACA,aAAO+E,gBAAgB,CAAC/D,YAAjB,CAA8Bf,YAA9B,CAAP;AACH,KATD,CASE,OAAOgB,CAAP,EAAU;AACR,UAAIA,CAAC,YAAYC,oBAAjB,EAA4B;AACxBD,QAAAA,CAAC,CAACE,gBAAF,CAAmBlB,YAAY,CAACD,aAAhC;AACH;;AACDc,MAAAA,sBAAsB,CAACM,kBAAvB,CAA0CH,CAA1C;AACA,YAAMA,CAAN;AACH;AACJ;;;;ACzEL;;;;AAKA,AAMA;;;;;AAIA,MAAagE;AAUT;;;;AAI2B,SAAbC,aAAa,CAACtB,SAAD;AACvB,UAAMjY,eAAe,GAAG,IAAIsZ,eAAJ,EAAxB;AACAtZ,IAAAA,eAAe,CAACwZ,GAAhB,GAAsBvB,SAAtB;AACA,WAAOjY,eAAP;AACH;AAED;;;;;;;;AAM6B,SAAfyZ,eAAe,CAACvZ,UAAD,EAAqBC,UAArB,EAAyCuZ,iBAAzC;AACzB,UAAM1Z,eAAe,GAAG,IAAIsZ,eAAJ,EAAxB;AACAtZ,IAAAA,eAAe,CAACG,UAAhB,GAA6BA,UAA7B;AACAH,IAAAA,eAAe,CAACE,UAAhB,GAA6BA,UAA7B;;AACA,QAAIwZ,iBAAJ,EAAuB;AACnB1Z,MAAAA,eAAe,CAAC0Z,iBAAhB,GAAoC,KAAKC,gBAAL,CAAsBD,iBAAtB,CAApC;AACH;;AACD,WAAO1Z,eAAP;AACH;AAED;;;;;;;;AAMOkY,EAAAA,MAAM,CAAClE,cAAD,EAAiC4F,MAAjC,EAAiDC,WAAjD;AACT;AACA,QAAI,KAAK1Z,UAAL,IAAmB,KAAKD,UAA5B,EAAwC;AAEpC,UAAI,KAAKsZ,GAAL,IAAY,CAAC,KAAKM,SAAL,EAAb,IAAiCF,MAAM,KAAK,KAAKA,MAAjD,IAA2DC,WAAW,KAAK,KAAKA,WAApF,EAAiG;AAC7F,eAAO,KAAKL,GAAZ;AACH;;AAED,aAAO,KAAKO,SAAL,CAAe/F,cAAf,EAA+B4F,MAA/B,EAAuCC,WAAvC,CAAP;AACH;AAED;;;;;;AAIA,QAAI,KAAKL,GAAT,EAAc;AACV,aAAO,KAAKA,GAAZ;AACH;;AAED,UAAMQ,0BAAe,CAACC,2BAAhB,EAAN;AACH;AAED;;;;;AAGQF,EAAAA,SAAS,CAAC/F,cAAD,EAAiC4F,MAAjC,EAAiDC,WAAjD;AAEb,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,UAAMK,QAAQ,GAAGC,oBAAS,CAACC,UAAV,EAAjB;AACA,SAAKC,cAAL,GAAsBH,QAAQ,GAAG,GAAjC;AAEA,UAAMI,MAAM,GAAc;AACtBC,MAAAA,GAAG,EAAE3c,YAAY,CAACE,OADI;AAEtB0c,MAAAA,GAAG,EAAEvY,aAAa,CAACO,eAAd,CAA8B,KAAKtC,UAAnC,EAA+C,KAA/C;AAFiB,KAA1B;;AAKA,QAAI,KAAKwZ,iBAAT,EAA4B;AACxBlU,MAAAA,MAAM,CAAC0T,MAAP,CAAcoB,MAAd,EAAsB;AAClBla,QAAAA,GAAG,EAAE,KAAKsZ;AADQ,OAAtB;AAGH;;AAED,UAAMe,OAAO,GAAG;AACZ,OAAC7c,YAAY,CAACK,QAAd,GAAyB,KAAK4b,WADlB;AAEZ,OAACjc,YAAY,CAACM,eAAd,GAAgC,KAAKmc,cAFzB;AAGZ,OAACzc,YAAY,CAACO,MAAd,GAAuB,KAAKyb,MAHhB;AAIZ,OAAChc,YAAY,CAACQ,OAAd,GAAwB,KAAKwb,MAJjB;AAKZ,OAAChc,YAAY,CAACS,UAAd,GAA2B6b,QALf;AAMZ,OAACtc,YAAY,CAACU,MAAd,GAAuB0V,cAAc,CAAC3P,aAAf;AANX,KAAhB;AASA,SAAKmV,GAAL,GAAWkB,iBAAI,CAACD,OAAD,EAAU,KAAKta,UAAf,EAA2B;AAAEma,MAAAA;AAAF,KAA3B,CAAf;AACA,WAAO,KAAKd,GAAZ;AACH;AAED;;;;;AAGQM,EAAAA,SAAS;AACb,WAAO,KAAKO,cAAL,GAAsBF,oBAAS,CAACC,UAAV,EAA7B;AACH;AAED;;;;;;AAI8B,SAAhBT,gBAAgB,CAACD,iBAAD;AAC1B;;;;;;;AAOA,UAAMiB,gBAAgB,GAAG,iEAAzB;AACA,UAAMC,KAAK,GAAa,EAAxB;AAEA,QAAIC,OAAJ;;AACA,WAAO,CAACA,OAAO,GAAGF,gBAAgB,CAACG,IAAjB,CAAsBpB,iBAAtB,CAAX,MAAyD,IAAhE,EAAsE;AAClE;AACAkB,MAAAA,KAAK,CAAClX,IAAN,CAAWmX,OAAO,CAAC,CAAD,CAAP,CAAWpY,OAAX,CAAmB,IAAnB,EAAyB,EAAzB,CAAX;AACH;;AAED,WAAOmY,KAAP;AACH;;;;AC9IL;;;;AAKA,AAmBA;;;;;;AAKA,MAAaG,sCAAsClH;AAE/C;;;;;;;;;;;;;;;;;;;AAmBA1P,EAAAA,YAAY2P;AACR,UAAMA,aAAN;AACA,SAAKkH,mBAAL,CAAyB,KAAKjH,MAA9B;AACH;AAED;;;;;AAG2C,QAA9BkH,8BAA8B,CAACtc,OAAD;AACvC,SAAKkN,MAAL,CAAYuI,IAAZ,CAAiB,uCAAjB,EAA0DzV,OAAO,CAAC0V,aAAlE;AACA,UAAMC,YAAY,GAAkC,EAChD,GAAG3V,OAD6C;AAEhD,SAAG,KAAK4V,qBAAL,CAA2B5V,OAA3B;AAF6C,KAApD;AAIA,UAAMgY,wBAAwB,GAA6B;AACvDuE,MAAAA,WAAW,EAAE5G,YAAY,CAAC4G,WAD6B;AAEvDC,MAAAA,iBAAiB,EAAExD,OAAO,CAACyD,GAAR,CAAYle,2BAAZ;AAFoC,KAA3D;AAIA,UAAMiY,sBAAsB,GAAG,KAAKC,gCAAL,CAAsCzX,KAAK,CAACsd,8BAA5C,EAA4E3G,YAAY,CAACD,aAAzF,EAAwGC,YAAY,CAAC+G,SAArH,CAA/B;;AACA,QAAI;AACA,YAAMC,sBAAsB,GAAG,MAAM,KAAKvG,6BAAL,CACjCT,YAAY,CAACzU,SADoB,EAEjCyU,YAAY,CAACD,aAFoB,EAGjCc,sBAHiC,EAIjCwB,wBAJiC,CAArC;AAMA,YAAM4E,sBAAsB,GAAG,IAAIC,iCAAJ,CAA2BF,sBAA3B,CAA/B;AACA,WAAKzP,MAAL,CAAYgF,OAAZ,CAAoB,kCAApB,EAAwDyD,YAAY,CAACD,aAArE;AACA,aAAOkH,sBAAsB,CAAClG,YAAvB,CAAoCf,YAApC,CAAP;AACH,KAVD,CAUE,OAAMgB,CAAN,EAAS;AACP,UAAIA,CAAC,YAAYC,oBAAjB,EAA4B;AACxBD,QAAAA,CAAC,CAACE,gBAAF,CAAmBlB,YAAY,CAACD,aAAhC;AACH;;AACDc,MAAAA,sBAAsB,CAACM,kBAAvB,CAA0CH,CAA1C;AACA,YAAMA,CAAN;AACH;AACJ;AAED;;;;;;;;;;;;;AAWmC,QAAtBmG,sBAAsB,CAAC9c,OAAD;AAC/B,SAAKkN,MAAL,CAAYuI,IAAZ,CAAiB,+BAAjB,EAAkDzV,OAAO,CAAC0V,aAA1D;AACA,UAAMC,YAAY,GAA4B,EAC1C,GAAG3V,OADuC;AAE1C,SAAG,KAAK4V,qBAAL,CAA2B5V,OAA3B;AAFuC,KAA9C;;AAIA,QAAI;AACA,YAAM2c,sBAAsB,GAAG,MAAM,KAAKvG,6BAAL,CACjCT,YAAY,CAACzU,SADoB,EAEjCyU,YAAY,CAACD,aAFoB,CAArC;AAIA,YAAMqH,SAAS,GAAG,IAAIC,2BAAJ,CAAqBL,sBAArB,CAAlB;AACA,WAAKzP,MAAL,CAAYgF,OAAZ,CAAoB,6BAApB,EAAmDyD,YAAY,CAACD,aAAhE;AACA,aAAOqH,SAAS,CAACrG,YAAV,CAAuBf,YAAvB,CAAP;AACH,KARD,CAQE,OAAOgB,CAAP,EAAU;AACR,UAAIA,CAAC,YAAYC,oBAAjB,EAA4B;AACxBD,QAAAA,CAAC,CAACE,gBAAF,CAAmBlB,YAAY,CAACD,aAAhC;AACH;;AACD,YAAMiB,CAAN;AACH;AACJ;;AAEO0F,EAAAA,mBAAmB,CAAClH,aAAD;AAEvB,UAAM8H,oBAAoB,GAAG,CAAC3W,sBAAW,CAACC,OAAZ,CAAoB4O,aAAa,CAACvS,IAAd,CAAmBxB,YAAvC,CAA9B;AACA,UAAM8b,uBAAuB,GAAG,CAAC5W,sBAAW,CAACC,OAAZ,CAAoB4O,aAAa,CAACvS,IAAd,CAAmBvB,eAAvC,CAAjC;AACA,UAAM8b,WAAW,GAAGhI,aAAa,CAACvS,IAAd,CAAmBtB,iBAAnB,IAAwC;AACxDC,MAAAA,UAAU,EAAE,EAD4C;AAExDC,MAAAA,UAAU,EAAE;AAF4C,KAA5D;AAIA,UAAM4b,mBAAmB,GAAG,CAAC9W,sBAAW,CAACC,OAAZ,CAAoB4W,WAAW,CAAC5b,UAAhC,CAAD,IAAgD,CAAC+E,sBAAW,CAACC,OAAZ,CAAoB4W,WAAW,CAAC3b,UAAhC,CAA7E;;AAGA,QACIyb,oBAAoB,IAAIC,uBAAxB,IACAA,uBAAuB,IAAIE,mBAD3B,IAEAH,oBAAoB,IAAIG,mBAH5B,EAGiD;AAC7C,YAAM/B,0BAAe,CAACgC,4BAAhB,EAAN;AACH;;AAED,QAAIlI,aAAa,CAACvS,IAAd,CAAmBxB,YAAvB,EAAqC;AACjC,WAAKA,YAAL,GAAoB+T,aAAa,CAACvS,IAAd,CAAmBxB,YAAvC;AACA;AACH;;AAED,QAAI+T,aAAa,CAACvS,IAAd,CAAmBvB,eAAvB,EAAwC;AACpC,WAAKA,eAAL,GAAuBsZ,eAAe,CAACC,aAAhB,CAA8BzF,aAAa,CAACvS,IAAd,CAAmBvB,eAAjD,CAAvB;AACA;AACH;;AAED,QAAI,CAAC+b,mBAAL,EAA0B;AACtB,YAAM/B,0BAAe,CAACgC,4BAAhB,EAAN;AACH,KAFD,MAEO;AAAA;;AACH,WAAKhc,eAAL,GAAuBsZ,eAAe,CAACG,eAAhB,CAAgCqC,WAAW,CAAC5b,UAA5C,EAAwD4b,WAAW,CAAC3b,UAApE,2BAAgF2T,aAAa,CAACvS,IAAd,CAAmBtB,iBAAnG,qBAAgF,sBAAsCG,GAAtH,CAAvB;AACH;AACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}